
Parcial_1_Comp_Structures_JDMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000611c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080062ac  080062ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800635c  0800635c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006364  08006364  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006364  08006364  00016364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800636c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  080063d4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080063d4  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001139d  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000251f  00000000  00000000  00031478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  00033998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c71  00000000  00000000  00034990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a84  00000000  00000000  00035601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012cf2  00000000  00000000  0005d085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f436a  00000000  00000000  0006fd77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a6c  00000000  00000000  001640e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00168b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006294 	.word	0x08006294

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006294 	.word	0x08006294

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:
uint8_t uartvalue[8];
uint8_t Rx_data[2];


int _write(int file, char *ptr, int len) // use the function that printf call
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)ptr,len,HAL_MAX_DELAY);//transmit the info using usart2
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <_write+0x28>)
 8000584:	f003 fbe8 	bl	8003d58 <HAL_UART_Transmit>
	return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000d0 	.word	0x200000d0

08000598 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //When the interruption of uart2 receive the function is called
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

	Rx_data[0] =Rx_data[0]-48; //a char ascci is received so it is converted to a decimal number
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <HAL_UART_RxCpltCallback+0x60>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	3b30      	subs	r3, #48	; 0x30
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <HAL_UART_RxCpltCallback+0x60>)
 80005aa:	701a      	strb	r2, [r3, #0]
	Rx_data[1]=Rx_data[1]-48;//a char ascci is received so it is converted to a decimal number
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_UART_RxCpltCallback+0x60>)
 80005ae:	785b      	ldrb	r3, [r3, #1]
 80005b0:	3b30      	subs	r3, #48	; 0x30
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <HAL_UART_RxCpltCallback+0x60>)
 80005b6:	705a      	strb	r2, [r3, #1]
	pwmbuffer = Rx_data[0]*10 +Rx_data[1]; //Ten times the most significant digit  plus the less significant digit
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_UART_RxCpltCallback+0x60>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	0092      	lsls	r2, r2, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_UART_RxCpltCallback+0x60>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	4413      	add	r3, r2
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <HAL_UART_RxCpltCallback+0x64>)
 80005d0:	701a      	strb	r2, [r3, #0]
	printf("lo ingresado es:%d %d\r\n",Rx_data[0],Rx_data[1]); //print the decimal values
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_UART_RxCpltCallback+0x60>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4619      	mov	r1, r3
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <HAL_UART_RxCpltCallback+0x60>)
 80005da:	785b      	ldrb	r3, [r3, #1]
 80005dc:	461a      	mov	r2, r3
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <HAL_UART_RxCpltCallback+0x68>)
 80005e0:	f004 ffe4 	bl	80055ac <iprintf>
	HAL_UART_Receive_IT(&huart2,Rx_data,2);// receive the data back to call the function again if necessary
 80005e4:	2202      	movs	r2, #2
 80005e6:	4904      	ldr	r1, [pc, #16]	; (80005f8 <HAL_UART_RxCpltCallback+0x60>)
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <HAL_UART_RxCpltCallback+0x6c>)
 80005ea:	f003 fc3f 	bl	8003e6c <HAL_UART_Receive_IT>
	}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000015c 	.word	0x2000015c
 80005fc:	20000158 	.word	0x20000158
 8000600:	080062ac 	.word	0x080062ac
 8000604:	200000d0 	.word	0x200000d0

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fb8a 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f82a 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f956 	bl	80008c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000618:	f000 f924 	bl	8000864 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800061c:	f000 f876 	bl	800070c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //PWM is started with the timer1
 8000620:	2100      	movs	r1, #0
 8000622:	480c      	ldr	r0, [pc, #48]	; (8000654 <main+0x4c>)
 8000624:	f002 fb30 	bl	8002c88 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_UART_Receive_IT(&huart2, Rx_data, 2);//receive the duty cicle by uart, and initialized a interruption
 8000628:	2202      	movs	r2, #2
 800062a:	490b      	ldr	r1, [pc, #44]	; (8000658 <main+0x50>)
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <main+0x54>)
 800062e:	f003 fc1d 	bl	8003e6c <HAL_UART_Receive_IT>

	 htim1.Instance->CCR1 = pwmbuffer;// generate the duty cicle
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <main+0x58>)
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <main+0x4c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	635a      	str	r2, [r3, #52]	; 0x34
	 printf("El valor del pwm es: %d\r\n",pwmbuffer); //the pwm duty is printed using uart2
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <main+0x58>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	4808      	ldr	r0, [pc, #32]	; (8000664 <main+0x5c>)
 8000644:	f004 ffb2 	bl	80055ac <iprintf>
	 HAL_Delay(1000); //wait 1s
 8000648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064c:	f000 fbe6 	bl	8000e1c <HAL_Delay>
	 HAL_UART_Receive_IT(&huart2, Rx_data, 2);//receive the duty cicle by uart, and initialized a interruption
 8000650:	e7ea      	b.n	8000628 <main+0x20>
 8000652:	bf00      	nop
 8000654:	20000084 	.word	0x20000084
 8000658:	2000015c 	.word	0x2000015c
 800065c:	200000d0 	.word	0x200000d0
 8000660:	20000158 	.word	0x20000158
 8000664:	080062c4 	.word	0x080062c4

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b096      	sub	sp, #88	; 0x58
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2244      	movs	r2, #68	; 0x44
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f004 ffed 	bl	8005656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	463b      	mov	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800068e:	f000 ff31 	bl	80014f4 <HAL_PWREx_ControlVoltageScaling>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000698:	f000 f966 	bl	8000968 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006b6:	230a      	movs	r3, #10
 80006b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ba:	2307      	movs	r3, #7
 80006bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 ff68 	bl	80015a0 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006d6:	f000 f947 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	2104      	movs	r1, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fb30 	bl	8001d58 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006fe:	f000 f933 	bl	8000968 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3758      	adds	r7, #88	; 0x58
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b09a      	sub	sp, #104	; 0x68
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
 800073c:	615a      	str	r2, [r3, #20]
 800073e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	222c      	movs	r2, #44	; 0x2c
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f004 ff85 	bl	8005656 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800074c:	4b43      	ldr	r3, [pc, #268]	; (800085c <MX_TIM1_Init+0x150>)
 800074e:	4a44      	ldr	r2, [pc, #272]	; (8000860 <MX_TIM1_Init+0x154>)
 8000750:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800-1;
 8000752:	4b42      	ldr	r3, [pc, #264]	; (800085c <MX_TIM1_Init+0x150>)
 8000754:	f240 321f 	movw	r2, #799	; 0x31f
 8000758:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b40      	ldr	r3, [pc, #256]	; (800085c <MX_TIM1_Init+0x150>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000760:	4b3e      	ldr	r3, [pc, #248]	; (800085c <MX_TIM1_Init+0x150>)
 8000762:	2263      	movs	r2, #99	; 0x63
 8000764:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000766:	4b3d      	ldr	r3, [pc, #244]	; (800085c <MX_TIM1_Init+0x150>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800076c:	4b3b      	ldr	r3, [pc, #236]	; (800085c <MX_TIM1_Init+0x150>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <MX_TIM1_Init+0x150>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000778:	4838      	ldr	r0, [pc, #224]	; (800085c <MX_TIM1_Init+0x150>)
 800077a:	f002 f9cd 	bl	8002b18 <HAL_TIM_Base_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000784:	f000 f8f0 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800078e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000792:	4619      	mov	r1, r3
 8000794:	4831      	ldr	r0, [pc, #196]	; (800085c <MX_TIM1_Init+0x150>)
 8000796:	f002 fc91 	bl	80030bc <HAL_TIM_ConfigClockSource>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80007a0:	f000 f8e2 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007a4:	482d      	ldr	r0, [pc, #180]	; (800085c <MX_TIM1_Init+0x150>)
 80007a6:	f002 fa0e 	bl	8002bc6 <HAL_TIM_PWM_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80007b0:	f000 f8da 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007c4:	4619      	mov	r1, r3
 80007c6:	4825      	ldr	r0, [pc, #148]	; (800085c <MX_TIM1_Init+0x150>)
 80007c8:	f003 f972 	bl	8003ab0 <HAL_TIMEx_MasterConfigSynchronization>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80007d2:	f000 f8c9 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d6:	2360      	movs	r3, #96	; 0x60
 80007d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007de:	2300      	movs	r3, #0
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007e2:	2300      	movs	r3, #0
 80007e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f6:	2200      	movs	r2, #0
 80007f8:	4619      	mov	r1, r3
 80007fa:	4818      	ldr	r0, [pc, #96]	; (800085c <MX_TIM1_Init+0x150>)
 80007fc:	f002 fb4a 	bl	8002e94 <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000806:	f000 f8af 	bl	8000968 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800082c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	4807      	ldr	r0, [pc, #28]	; (800085c <MX_TIM1_Init+0x150>)
 8000840:	f003 f9be 	bl	8003bc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800084a:	f000 f88d 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <MX_TIM1_Init+0x150>)
 8000850:	f000 f8d4 	bl	80009fc <HAL_TIM_MspPostInit>

}
 8000854:	bf00      	nop
 8000856:	3768      	adds	r7, #104	; 0x68
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000084 	.word	0x20000084
 8000860:	40012c00 	.word	0x40012c00

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_USART2_UART_Init+0x58>)
 800086a:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <MX_USART2_UART_Init+0x5c>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_USART2_UART_Init+0x58>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_USART2_UART_Init+0x58>)
 80008a8:	f003 fa08 	bl	8003cbc <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008b2:	f000 f859 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000d0 	.word	0x200000d0
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <MX_GPIO_Init+0x9c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a20      	ldr	r2, [pc, #128]	; (8000960 <MX_GPIO_Init+0x9c>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <MX_GPIO_Init+0x9c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_GPIO_Init+0x9c>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a1a      	ldr	r2, [pc, #104]	; (8000960 <MX_GPIO_Init+0x9c>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_GPIO_Init+0x9c>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_GPIO_Init+0x9c>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <MX_GPIO_Init+0x9c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_GPIO_Init+0x9c>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_GPIO_Init+0x9c>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <MX_GPIO_Init+0x9c>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_GPIO_Init+0x9c>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000940:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_GPIO_Init+0xa0>)
 8000952:	f000 fc17 	bl	8001184 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	; 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000
 8000964:	48000800 	.word	0x48000800

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6613      	str	r3, [r2, #96]	; 0x60
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x44>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x44>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6593      	str	r3, [r2, #88]	; 0x58
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_TIM_Base_MspInit+0x38>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d10b      	bne.n	80009e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_TIM_Base_MspInit+0x3c>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d2:	4a09      	ldr	r2, [pc, #36]	; (80009f8 <HAL_TIM_Base_MspInit+0x3c>)
 80009d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009d8:	6613      	str	r3, [r2, #96]	; 0x60
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <HAL_TIM_Base_MspInit+0x3c>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40012c00 	.word	0x40012c00
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <HAL_TIM_MspPostInit+0x68>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d11d      	bne.n	8000a5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_TIM_MspPostInit+0x6c>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <HAL_TIM_MspPostInit+0x6c>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_TIM_MspPostInit+0x6c>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4619      	mov	r1, r3
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a56:	f000 fb95 	bl	8001184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40012c00 	.word	0x40012c00
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0ac      	sub	sp, #176	; 0xb0
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2288      	movs	r2, #136	; 0x88
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 fde2 	bl	8005656 <memset>
  if(huart->Instance==USART2)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <HAL_UART_MspInit+0xc0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d143      	bne.n	8000b24 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fb79 	bl	80021a0 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ab4:	f7ff ff58 	bl	8000968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <HAL_UART_MspInit+0xc4>)
 8000aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abc:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <HAL_UART_MspInit+0xc4>)
 8000abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <HAL_UART_MspInit+0xc4>)
 8000ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <HAL_UART_MspInit+0xc4>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <HAL_UART_MspInit+0xc4>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_UART_MspInit+0xc4>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b00:	2307      	movs	r3, #7
 8000b02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f000 fb38 	bl	8001184 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	2026      	movs	r0, #38	; 0x26
 8000b1a:	f000 fa7e 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b1e:	2026      	movs	r0, #38	; 0x26
 8000b20:	f000 fa97 	bl	8001052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b24:	bf00      	nop
 8000b26:	37b0      	adds	r7, #176	; 0xb0
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40021000 	.word	0x40021000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f92c 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <USART2_IRQHandler+0x10>)
 8000b8e:	f003 f9b9 	bl	8003f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200000d0 	.word	0x200000d0

08000b9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	e00a      	b.n	8000bc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bae:	f3af 8000 	nop.w
 8000bb2:	4601      	mov	r1, r0
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	1c5a      	adds	r2, r3, #1
 8000bb8:	60ba      	str	r2, [r7, #8]
 8000bba:	b2ca      	uxtb	r2, r1
 8000bbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dbf0      	blt.n	8000bae <_read+0x12>
  }

  return len;
 8000bcc:	687b      	ldr	r3, [r7, #4]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfe:	605a      	str	r2, [r3, #4]
  return 0;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <_isatty>:

int _isatty(int file)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f004 fd40 	bl	80056f4 <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20018000 	.word	0x20018000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	20000160 	.word	0x20000160
 8000ca8:	200002b8 	.word	0x200002b8

08000cac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd4:	f7ff ffea 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	; (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	; (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f004 fcff 	bl	8005700 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d02:	f7ff fc81 	bl	8000608 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d14:	0800636c 	.word	0x0800636c
  ldr r2, =_sbss
 8000d18:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d1c:	200002b4 	.word	0x200002b4

08000d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_2_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_Init+0x3c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <HAL_Init+0x3c>)
 8000d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3a:	2003      	movs	r0, #3
 8000d3c:	f000 f962 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d40:	2000      	movs	r0, #0
 8000d42:	f000 f80f 	bl	8000d64 <HAL_InitTick>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d002      	beq.n	8000d52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	e001      	b.n	8000d56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d52:	f7ff fe0f 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d56:	79fb      	ldrb	r3, [r7, #7]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40022000 	.word	0x40022000

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_InitTick+0x6c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d023      	beq.n	8000dc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_InitTick+0x70>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_InitTick+0x6c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f96d 	bl	800106e <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10f      	bne.n	8000dba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d809      	bhi.n	8000db4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f000 f937 	bl	800101a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_InitTick+0x74>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e007      	b.n	8000dc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	e004      	b.n	8000dc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
 8000dbe:	e001      	b.n	8000dc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000164 	.word	0x20000164

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000164 	.word	0x20000164

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_Delay+0x44>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e42:	bf00      	nop
 8000e44:	f7ff ffde 	bl	8000e04 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8f7      	bhi.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	; (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff29 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff3e 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff8e 	bl	8000f58 <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5d 	bl	8000f04 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff31 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffa2 	bl	8000fc0 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001086:	b480      	push	{r7}
 8001088:	b085      	sub	sp, #20
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d008      	beq.n	80010b0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2204      	movs	r2, #4
 80010a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e022      	b.n	80010f6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 020e 	bic.w	r2, r2, #14
 80010be:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d4:	f003 021c 	and.w	r2, r3, #28
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	2101      	movs	r1, #1
 80010de:	fa01 f202 	lsl.w	r2, r1, r2
 80010e2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d005      	beq.n	8001126 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2204      	movs	r2, #4
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e029      	b.n	800117a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 020e 	bic.w	r2, r2, #14
 8001134:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0201 	bic.w	r2, r2, #1
 8001144:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f003 021c 	and.w	r2, r3, #28
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	2101      	movs	r1, #1
 8001154:	fa01 f202 	lsl.w	r2, r1, r2
 8001158:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	4798      	blx	r3
    }
  }
  return status;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	e17f      	b.n	8001494 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	2101      	movs	r1, #1
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 8171 	beq.w	800148e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d005      	beq.n	80011c4 <HAL_GPIO_Init+0x40>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d130      	bne.n	8001226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fa:	2201      	movs	r2, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	091b      	lsrs	r3, r3, #4
 8001210:	f003 0201 	and.w	r2, r3, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b03      	cmp	r3, #3
 8001230:	d118      	bne.n	8001264 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001238:	2201      	movs	r2, #1
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	f003 0201 	and.w	r2, r3, #1
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b03      	cmp	r3, #3
 800126e:	d017      	beq.n	80012a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d123      	bne.n	80012f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	08da      	lsrs	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3208      	adds	r2, #8
 80012ee:	6939      	ldr	r1, [r7, #16]
 80012f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0203 	and.w	r2, r3, #3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 80ac 	beq.w	800148e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <HAL_GPIO_Init+0x330>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133a:	4a5e      	ldr	r2, [pc, #376]	; (80014b4 <HAL_GPIO_Init+0x330>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6613      	str	r3, [r2, #96]	; 0x60
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <HAL_GPIO_Init+0x330>)
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800134e:	4a5a      	ldr	r2, [pc, #360]	; (80014b8 <HAL_GPIO_Init+0x334>)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001378:	d025      	beq.n	80013c6 <HAL_GPIO_Init+0x242>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4f      	ldr	r2, [pc, #316]	; (80014bc <HAL_GPIO_Init+0x338>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d01f      	beq.n	80013c2 <HAL_GPIO_Init+0x23e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4e      	ldr	r2, [pc, #312]	; (80014c0 <HAL_GPIO_Init+0x33c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d019      	beq.n	80013be <HAL_GPIO_Init+0x23a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4d      	ldr	r2, [pc, #308]	; (80014c4 <HAL_GPIO_Init+0x340>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0x236>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4c      	ldr	r2, [pc, #304]	; (80014c8 <HAL_GPIO_Init+0x344>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00d      	beq.n	80013b6 <HAL_GPIO_Init+0x232>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4b      	ldr	r2, [pc, #300]	; (80014cc <HAL_GPIO_Init+0x348>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x22e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4a      	ldr	r2, [pc, #296]	; (80014d0 <HAL_GPIO_Init+0x34c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_GPIO_Init+0x22a>
 80013aa:	2306      	movs	r3, #6
 80013ac:	e00c      	b.n	80013c8 <HAL_GPIO_Init+0x244>
 80013ae:	2307      	movs	r3, #7
 80013b0:	e00a      	b.n	80013c8 <HAL_GPIO_Init+0x244>
 80013b2:	2305      	movs	r3, #5
 80013b4:	e008      	b.n	80013c8 <HAL_GPIO_Init+0x244>
 80013b6:	2304      	movs	r3, #4
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x244>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e004      	b.n	80013c8 <HAL_GPIO_Init+0x244>
 80013be:	2302      	movs	r3, #2
 80013c0:	e002      	b.n	80013c8 <HAL_GPIO_Init+0x244>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <HAL_GPIO_Init+0x244>
 80013c6:	2300      	movs	r3, #0
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	f002 0203 	and.w	r2, r2, #3
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	4093      	lsls	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013d8:	4937      	ldr	r1, [pc, #220]	; (80014b8 <HAL_GPIO_Init+0x334>)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	3302      	adds	r3, #2
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013e6:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <HAL_GPIO_Init+0x350>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800140a:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <HAL_GPIO_Init+0x350>)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HAL_GPIO_Init+0x350>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001434:	4a27      	ldr	r2, [pc, #156]	; (80014d4 <HAL_GPIO_Init+0x350>)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <HAL_GPIO_Init+0x350>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800145e:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <HAL_GPIO_Init+0x350>)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_GPIO_Init+0x350>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001488:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <HAL_GPIO_Init+0x350>)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa22 f303 	lsr.w	r3, r2, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f47f ae78 	bne.w	8001194 <HAL_GPIO_Init+0x10>
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010000 	.word	0x40010000
 80014bc:	48000400 	.word	0x48000400
 80014c0:	48000800 	.word	0x48000800
 80014c4:	48000c00 	.word	0x48000c00
 80014c8:	48001000 	.word	0x48001000
 80014cc:	48001400 	.word	0x48001400
 80014d0:	48001800 	.word	0x48001800
 80014d4:	40010400 	.word	0x40010400

080014d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40007000 	.word	0x40007000

080014f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001502:	d130      	bne.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001504:	4b23      	ldr	r3, [pc, #140]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800150c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001510:	d038      	beq.n	8001584 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800151a:	4a1e      	ldr	r2, [pc, #120]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001520:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2232      	movs	r2, #50	; 0x32
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	4a1b      	ldr	r2, [pc, #108]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800152e:	fba2 2303 	umull	r2, r3, r2, r3
 8001532:	0c9b      	lsrs	r3, r3, #18
 8001534:	3301      	adds	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001538:	e002      	b.n	8001540 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3b01      	subs	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800154c:	d102      	bne.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x60>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f2      	bne.n	800153a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001560:	d110      	bne.n	8001584 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e00f      	b.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800156e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001572:	d007      	beq.n	8001584 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800157c:	4a05      	ldr	r2, [pc, #20]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001582:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40007000 	.word	0x40007000
 8001598:	20000000 	.word	0x20000000
 800159c:	431bde83 	.word	0x431bde83

080015a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e3ca      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b2:	4b97      	ldr	r3, [pc, #604]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015bc:	4b94      	ldr	r3, [pc, #592]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80e4 	beq.w	800179c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <HAL_RCC_OscConfig+0x4a>
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b0c      	cmp	r3, #12
 80015de:	f040 808b 	bne.w	80016f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	f040 8087 	bne.w	80016f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ea:	4b89      	ldr	r3, [pc, #548]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <HAL_RCC_OscConfig+0x62>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e3a2      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1a      	ldr	r2, [r3, #32]
 8001606:	4b82      	ldr	r3, [pc, #520]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d004      	beq.n	800161c <HAL_RCC_OscConfig+0x7c>
 8001612:	4b7f      	ldr	r3, [pc, #508]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800161a:	e005      	b.n	8001628 <HAL_RCC_OscConfig+0x88>
 800161c:	4b7c      	ldr	r3, [pc, #496]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 800161e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001628:	4293      	cmp	r3, r2
 800162a:	d223      	bcs.n	8001674 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fd55 	bl	80020e0 <RCC_SetFlashLatencyFromMSIRange>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e383      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001640:	4b73      	ldr	r3, [pc, #460]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a72      	ldr	r2, [pc, #456]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b70      	ldr	r3, [pc, #448]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	496d      	ldr	r1, [pc, #436]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800165e:	4b6c      	ldr	r3, [pc, #432]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	4968      	ldr	r1, [pc, #416]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
 8001672:	e025      	b.n	80016c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001674:	4b66      	ldr	r3, [pc, #408]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a65      	ldr	r2, [pc, #404]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b63      	ldr	r3, [pc, #396]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4960      	ldr	r1, [pc, #384]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001692:	4b5f      	ldr	r3, [pc, #380]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	495b      	ldr	r1, [pc, #364]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fd15 	bl	80020e0 <RCC_SetFlashLatencyFromMSIRange>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e343      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016c0:	f000 fc4a 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b52      	ldr	r3, [pc, #328]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	4950      	ldr	r1, [pc, #320]	; (8001814 <HAL_RCC_OscConfig+0x274>)
 80016d2:	5ccb      	ldrb	r3, [r1, r3]
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
 80016dc:	4a4e      	ldr	r2, [pc, #312]	; (8001818 <HAL_RCC_OscConfig+0x278>)
 80016de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016e0:	4b4e      	ldr	r3, [pc, #312]	; (800181c <HAL_RCC_OscConfig+0x27c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fb3d 	bl	8000d64 <HAL_InitTick>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d052      	beq.n	800179a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	e327      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d032      	beq.n	8001766 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001700:	4b43      	ldr	r3, [pc, #268]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a42      	ldr	r2, [pc, #264]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800170c:	f7ff fb7a 	bl	8000e04 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001714:	f7ff fb76 	bl	8000e04 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e310      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001726:	4b3a      	ldr	r3, [pc, #232]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001732:	4b37      	ldr	r3, [pc, #220]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a36      	ldr	r2, [pc, #216]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b34      	ldr	r3, [pc, #208]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4931      	ldr	r1, [pc, #196]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001750:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	492c      	ldr	r1, [pc, #176]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
 8001764:	e01a      	b.n	800179c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001766:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a29      	ldr	r2, [pc, #164]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001772:	f7ff fb47 	bl	8000e04 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800177a:	f7ff fb43 	bl	8000e04 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e2dd      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800178c:	4b20      	ldr	r3, [pc, #128]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x1da>
 8001798:	e000      	b.n	800179c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800179a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d074      	beq.n	8001892 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x21a>
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b0c      	cmp	r3, #12
 80017b2:	d10e      	bne.n	80017d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d10b      	bne.n	80017d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d064      	beq.n	8001890 <HAL_RCC_OscConfig+0x2f0>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d160      	bne.n	8001890 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e2ba      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x24a>
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 80017e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e026      	b.n	8001838 <HAL_RCC_OscConfig+0x298>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f2:	d115      	bne.n	8001820 <HAL_RCC_OscConfig+0x280>
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a05      	ldr	r2, [pc, #20]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 80017fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a02      	ldr	r2, [pc, #8]	; (8001810 <HAL_RCC_OscConfig+0x270>)
 8001806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e014      	b.n	8001838 <HAL_RCC_OscConfig+0x298>
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	080062e0 	.word	0x080062e0
 8001818:	20000000 	.word	0x20000000
 800181c:	20000004 	.word	0x20000004
 8001820:	4ba0      	ldr	r3, [pc, #640]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a9f      	ldr	r2, [pc, #636]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b9d      	ldr	r3, [pc, #628]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a9c      	ldr	r2, [pc, #624]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff fae0 	bl	8000e04 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fadc 	bl	8000e04 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e276      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185a:	4b92      	ldr	r3, [pc, #584]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x2a8>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff facc 	bl	8000e04 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fac8 	bl	8000e04 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e262      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001882:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x2d0>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d060      	beq.n	8001960 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_OscConfig+0x310>
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d119      	bne.n	80018de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d116      	bne.n	80018de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b0:	4b7c      	ldr	r3, [pc, #496]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x328>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e23f      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b76      	ldr	r3, [pc, #472]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	4973      	ldr	r1, [pc, #460]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018dc:	e040      	b.n	8001960 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d023      	beq.n	800192e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e6:	4b6f      	ldr	r3, [pc, #444]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a6e      	ldr	r2, [pc, #440]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80018ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff fa87 	bl	8000e04 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fa:	f7ff fa83 	bl	8000e04 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e21d      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800190c:	4b65      	ldr	r3, [pc, #404]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001918:	4b62      	ldr	r3, [pc, #392]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	495f      	ldr	r1, [pc, #380]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
 800192c:	e018      	b.n	8001960 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192e:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a5c      	ldr	r2, [pc, #368]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff fa63 	bl	8000e04 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff fa5f 	bl	8000e04 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1f9      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001954:	4b53      	ldr	r3, [pc, #332]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d03c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01c      	beq.n	80019ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001974:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197a:	4a4a      	ldr	r2, [pc, #296]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff fa3e 	bl	8000e04 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff fa3a 	bl	8000e04 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e1d4      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800199e:	4b41      	ldr	r3, [pc, #260]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80019a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0ef      	beq.n	800198c <HAL_RCC_OscConfig+0x3ec>
 80019ac:	e01b      	b.n	80019e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ae:	4b3d      	ldr	r3, [pc, #244]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80019b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b4:	4a3b      	ldr	r2, [pc, #236]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff fa21 	bl	8000e04 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c6:	f7ff fa1d 	bl	8000e04 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e1b7      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d8:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80019da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1ef      	bne.n	80019c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80a6 	beq.w	8001b40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019f8:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10d      	bne.n	8001a20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a08:	4a26      	ldr	r2, [pc, #152]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a20:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <HAL_RCC_OscConfig+0x508>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d118      	bne.n	8001a5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <HAL_RCC_OscConfig+0x508>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1d      	ldr	r2, [pc, #116]	; (8001aa8 <HAL_RCC_OscConfig+0x508>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a38:	f7ff f9e4 	bl	8000e04 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a40:	f7ff f9e0 	bl	8000e04 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e17a      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_RCC_OscConfig+0x508>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d108      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4d8>
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a76:	e029      	b.n	8001acc <HAL_RCC_OscConfig+0x52c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d115      	bne.n	8001aac <HAL_RCC_OscConfig+0x50c>
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a86:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	4a03      	ldr	r2, [pc, #12]	; (8001aa4 <HAL_RCC_OscConfig+0x504>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa0:	e014      	b.n	8001acc <HAL_RCC_OscConfig+0x52c>
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	4b9c      	ldr	r3, [pc, #624]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab2:	4a9b      	ldr	r2, [pc, #620]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001abc:	4b98      	ldr	r3, [pc, #608]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac2:	4a97      	ldr	r2, [pc, #604]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001ac4:	f023 0304 	bic.w	r3, r3, #4
 8001ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d016      	beq.n	8001b02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f996 	bl	8000e04 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001adc:	f7ff f992 	bl	8000e04 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e12a      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af2:	4b8b      	ldr	r3, [pc, #556]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ed      	beq.n	8001adc <HAL_RCC_OscConfig+0x53c>
 8001b00:	e015      	b.n	8001b2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff f97f 	bl	8000e04 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff f97b 	bl	8000e04 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e113      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b20:	4b7f      	ldr	r3, [pc, #508]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ed      	bne.n	8001b0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b2e:	7ffb      	ldrb	r3, [r7, #31]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b34:	4b7a      	ldr	r3, [pc, #488]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	4a79      	ldr	r2, [pc, #484]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80fe 	beq.w	8001d46 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	f040 80d0 	bne.w	8001cf4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b54:	4b72      	ldr	r3, [pc, #456]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f003 0203 	and.w	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d130      	bne.n	8001bca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	3b01      	subs	r3, #1
 8001b74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d127      	bne.n	8001bca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d11f      	bne.n	8001bca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b94:	2a07      	cmp	r2, #7
 8001b96:	bf14      	ite	ne
 8001b98:	2201      	movne	r2, #1
 8001b9a:	2200      	moveq	r2, #0
 8001b9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d113      	bne.n	8001bca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bac:	085b      	lsrs	r3, r3, #1
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d109      	bne.n	8001bca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	085b      	lsrs	r3, r3, #1
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d06e      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b0c      	cmp	r3, #12
 8001bce:	d069      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bd0:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0ad      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bec:	4b4c      	ldr	r3, [pc, #304]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a4b      	ldr	r2, [pc, #300]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bf8:	f7ff f904 	bl	8000e04 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff f900 	bl	8000e04 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e09a      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c12:	4b43      	ldr	r3, [pc, #268]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1e:	4b40      	ldr	r3, [pc, #256]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	4b40      	ldr	r3, [pc, #256]	; (8001d24 <HAL_RCC_OscConfig+0x784>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c2e:	3a01      	subs	r2, #1
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	4311      	orrs	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c38:	0212      	lsls	r2, r2, #8
 8001c3a:	4311      	orrs	r1, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c40:	0852      	lsrs	r2, r2, #1
 8001c42:	3a01      	subs	r2, #1
 8001c44:	0552      	lsls	r2, r2, #21
 8001c46:	4311      	orrs	r1, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c4c:	0852      	lsrs	r2, r2, #1
 8001c4e:	3a01      	subs	r2, #1
 8001c50:	0652      	lsls	r2, r2, #25
 8001c52:	4311      	orrs	r1, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c58:	0912      	lsrs	r2, r2, #4
 8001c5a:	0452      	lsls	r2, r2, #17
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	4930      	ldr	r1, [pc, #192]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c64:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a2d      	ldr	r2, [pc, #180]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a2a      	ldr	r2, [pc, #168]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c7c:	f7ff f8c2 	bl	8000e04 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff f8be 	bl	8000e04 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e058      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c96:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca2:	e050      	b.n	8001d46 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e04f      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d148      	bne.n	8001d46 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4a16      	ldr	r2, [pc, #88]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ccc:	f7ff f89a 	bl	8000e04 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7ff f896 	bl	8000e04 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e030      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x734>
 8001cf2:	e028      	b.n	8001d46 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2b0c      	cmp	r3, #12
 8001cf8:	d023      	beq.n	8001d42 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_RCC_OscConfig+0x780>)
 8001d00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff f87d 	bl	8000e04 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d0c:	e00c      	b.n	8001d28 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff f879 	bl	8000e04 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d905      	bls.n	8001d28 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e013      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
 8001d20:	40021000 	.word	0x40021000
 8001d24:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_OscConfig+0x7b0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1ec      	bne.n	8001d0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_OscConfig+0x7b0>)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4905      	ldr	r1, [pc, #20]	; (8001d50 <HAL_RCC_OscConfig+0x7b0>)
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_RCC_OscConfig+0x7b4>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60cb      	str	r3, [r1, #12]
 8001d40:	e001      	b.n	8001d46 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	feeefffc 	.word	0xfeeefffc

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0e7      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b75      	ldr	r3, [pc, #468]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d910      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b72      	ldr	r3, [pc, #456]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	4970      	ldr	r1, [pc, #448]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b6e      	ldr	r3, [pc, #440]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0cf      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d010      	beq.n	8001dca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	4b66      	ldr	r3, [pc, #408]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d908      	bls.n	8001dca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4960      	ldr	r1, [pc, #384]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d04c      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	4b5a      	ldr	r3, [pc, #360]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d121      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0a6      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df6:	4b54      	ldr	r3, [pc, #336]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d115      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e09a      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e0e:	4b4e      	ldr	r3, [pc, #312]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e08e      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e086      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4943      	ldr	r1, [pc, #268]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e40:	f7fe ffe0 	bl	8000e04 <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7fe ffdc 	bl	8000e04 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e06e      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d010      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d208      	bcs.n	8001e9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	492b      	ldr	r1, [pc, #172]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9e:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d210      	bcs.n	8001ece <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 0207 	bic.w	r2, r3, #7
 8001eb4:	4923      	ldr	r1, [pc, #140]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e036      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4918      	ldr	r1, [pc, #96]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4910      	ldr	r1, [pc, #64]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f0c:	f000 f824 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	490b      	ldr	r1, [pc, #44]	; (8001f4c <HAL_RCC_ClockConfig+0x1f4>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_RCC_ClockConfig+0x1fc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe ff17 	bl	8000d64 <HAL_InitTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40022000 	.word	0x40022000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	080062e0 	.word	0x080062e0
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f66:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f70:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x34>
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d121      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d11e      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f8c:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f98:	4b31      	ldr	r3, [pc, #196]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e005      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fb4:	4a2b      	ldr	r2, [pc, #172]	; (8002064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	e004      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d134      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0xa6>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d003      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0xac>
 8001ffc:	e005      	b.n	800200a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_RCC_GetSysClockFreq+0x110>)
 8002000:	617b      	str	r3, [r7, #20]
      break;
 8002002:	e005      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_GetSysClockFreq+0x114>)
 8002006:	617b      	str	r3, [r7, #20]
      break;
 8002008:	e002      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	617b      	str	r3, [r7, #20]
      break;
 800200e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	3301      	adds	r3, #1
 800201c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	fb03 f202 	mul.w	r2, r3, r2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	0e5b      	lsrs	r3, r3, #25
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	3301      	adds	r3, #1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002050:	69bb      	ldr	r3, [r7, #24]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	080062f8 	.word	0x080062f8
 8002068:	00f42400 	.word	0x00f42400
 800206c:	007a1200 	.word	0x007a1200

08002070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_RCC_GetHCLKFreq+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000000 	.word	0x20000000

08002088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800208c:	f7ff fff0 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4904      	ldr	r1, [pc, #16]	; (80020b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	080062f0 	.word	0x080062f0

080020b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020b8:	f7ff ffda 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0adb      	lsrs	r3, r3, #11
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4904      	ldr	r1, [pc, #16]	; (80020dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	080062f0 	.word	0x080062f0

080020e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020f8:	f7ff f9ee 	bl	80014d8 <HAL_PWREx_GetVoltageRange>
 80020fc:	6178      	str	r0, [r7, #20]
 80020fe:	e014      	b.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	4a24      	ldr	r2, [pc, #144]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210a:	6593      	str	r3, [r2, #88]	; 0x58
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002118:	f7ff f9de 	bl	80014d8 <HAL_PWREx_GetVoltageRange>
 800211c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002128:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002130:	d10b      	bne.n	800214a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b80      	cmp	r3, #128	; 0x80
 8002136:	d919      	bls.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2ba0      	cmp	r3, #160	; 0xa0
 800213c:	d902      	bls.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800213e:	2302      	movs	r3, #2
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	e013      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002144:	2301      	movs	r3, #1
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	e010      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	d902      	bls.n	8002156 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002150:	2303      	movs	r3, #3
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	e00a      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b80      	cmp	r3, #128	; 0x80
 800215a:	d102      	bne.n	8002162 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800215c:	2302      	movs	r3, #2
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e004      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b70      	cmp	r3, #112	; 0x70
 8002166:	d101      	bne.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002168:	2301      	movs	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 0207 	bic.w	r2, r3, #7
 8002174:	4909      	ldr	r1, [pc, #36]	; (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800217c:	4b07      	ldr	r3, [pc, #28]	; (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	40022000 	.word	0x40022000

080021a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021a8:	2300      	movs	r3, #0
 80021aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021ac:	2300      	movs	r3, #0
 80021ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d041      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021c4:	d02a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021ca:	d824      	bhi.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021d0:	d008      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021d6:	d81e      	bhi.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e0:	d010      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021e2:	e018      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021e4:	4b86      	ldr	r3, [pc, #536]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4a85      	ldr	r2, [pc, #532]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021f0:	e015      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2100      	movs	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fabb 	bl	8002774 <RCCEx_PLLSAI1_Config>
 80021fe:	4603      	mov	r3, r0
 8002200:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002202:	e00c      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3320      	adds	r3, #32
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fba6 	bl	800295c <RCCEx_PLLSAI2_Config>
 8002210:	4603      	mov	r3, r0
 8002212:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002214:	e003      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	74fb      	strb	r3, [r7, #19]
      break;
 800221a:	e000      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800221c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10b      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002224:	4b76      	ldr	r3, [pc, #472]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002232:	4973      	ldr	r1, [pc, #460]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800223a:	e001      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d041      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002250:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002254:	d02a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002256:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800225a:	d824      	bhi.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800225c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002260:	d008      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002266:	d81e      	bhi.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002270:	d010      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002272:	e018      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002274:	4b62      	ldr	r3, [pc, #392]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a61      	ldr	r2, [pc, #388]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002280:	e015      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3304      	adds	r3, #4
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fa73 	bl	8002774 <RCCEx_PLLSAI1_Config>
 800228e:	4603      	mov	r3, r0
 8002290:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002292:	e00c      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3320      	adds	r3, #32
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fb5e 	bl	800295c <RCCEx_PLLSAI2_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022a4:	e003      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	74fb      	strb	r3, [r7, #19]
      break;
 80022aa:	e000      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10b      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022b4:	4b52      	ldr	r3, [pc, #328]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022c2:	494f      	ldr	r1, [pc, #316]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022ca:	e001      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80a0 	beq.w	800241e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022e2:	4b47      	ldr	r3, [pc, #284]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022f2:	2300      	movs	r3, #0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00d      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	4b41      	ldr	r3, [pc, #260]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	4a40      	ldr	r2, [pc, #256]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002302:	6593      	str	r3, [r2, #88]	; 0x58
 8002304:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002310:	2301      	movs	r3, #1
 8002312:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002314:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a3a      	ldr	r2, [pc, #232]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800231a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002320:	f7fe fd70 	bl	8000e04 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002326:	e009      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002328:	f7fe fd6c 	bl	8000e04 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d902      	bls.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	74fb      	strb	r3, [r7, #19]
        break;
 800233a:	e005      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ef      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002348:	7cfb      	ldrb	r3, [r7, #19]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d15c      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800234e:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002358:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01f      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	429a      	cmp	r2, r3
 800236a:	d019      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800236c:	4b24      	ldr	r3, [pc, #144]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002376:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002378:	4b21      	ldr	r3, [pc, #132]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	4a20      	ldr	r2, [pc, #128]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002388:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	4a1c      	ldr	r2, [pc, #112]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002398:	4a19      	ldr	r2, [pc, #100]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d016      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7fe fd2b 	bl	8000e04 <HAL_GetTick>
 80023ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b0:	e00b      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe fd27 	bl	8000e04 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d902      	bls.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	74fb      	strb	r3, [r7, #19]
            break;
 80023c8:	e006      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ec      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ee:	4904      	ldr	r1, [pc, #16]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023f6:	e009      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	74bb      	strb	r3, [r7, #18]
 80023fc:	e006      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800240c:	7c7b      	ldrb	r3, [r7, #17]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d105      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002412:	4b9e      	ldr	r3, [pc, #632]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	4a9d      	ldr	r2, [pc, #628]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800242a:	4b98      	ldr	r3, [pc, #608]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	f023 0203 	bic.w	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	4994      	ldr	r1, [pc, #592]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800244c:	4b8f      	ldr	r3, [pc, #572]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	f023 020c 	bic.w	r2, r3, #12
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245a:	498c      	ldr	r1, [pc, #560]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800246e:	4b87      	ldr	r3, [pc, #540]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	4983      	ldr	r1, [pc, #524]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002490:	4b7e      	ldr	r3, [pc, #504]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	497b      	ldr	r1, [pc, #492]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024b2:	4b76      	ldr	r3, [pc, #472]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c0:	4972      	ldr	r1, [pc, #456]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024d4:	4b6d      	ldr	r3, [pc, #436]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	496a      	ldr	r1, [pc, #424]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024f6:	4b65      	ldr	r3, [pc, #404]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	4961      	ldr	r1, [pc, #388]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002518:	4b5c      	ldr	r3, [pc, #368]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002526:	4959      	ldr	r1, [pc, #356]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800253a:	4b54      	ldr	r3, [pc, #336]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002548:	4950      	ldr	r1, [pc, #320]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800255c:	4b4b      	ldr	r3, [pc, #300]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	4948      	ldr	r1, [pc, #288]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800257e:	4b43      	ldr	r3, [pc, #268]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	493f      	ldr	r1, [pc, #252]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d028      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025a0:	4b3a      	ldr	r3, [pc, #232]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ae:	4937      	ldr	r1, [pc, #220]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025be:	d106      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c0:	4b32      	ldr	r3, [pc, #200]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4a31      	ldr	r2, [pc, #196]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ca:	60d3      	str	r3, [r2, #12]
 80025cc:	e011      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025d6:	d10c      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3304      	adds	r3, #4
 80025dc:	2101      	movs	r1, #1
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f8c8 	bl	8002774 <RCCEx_PLLSAI1_Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025ee:	7cfb      	ldrb	r3, [r7, #19]
 80025f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d028      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025fe:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	491f      	ldr	r1, [pc, #124]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800261c:	d106      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261e:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	4a1a      	ldr	r2, [pc, #104]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002628:	60d3      	str	r3, [r2, #12]
 800262a:	e011      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002634:	d10c      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3304      	adds	r3, #4
 800263a:	2101      	movs	r1, #1
 800263c:	4618      	mov	r0, r3
 800263e:	f000 f899 	bl	8002774 <RCCEx_PLLSAI1_Config>
 8002642:	4603      	mov	r3, r0
 8002644:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002646:	7cfb      	ldrb	r3, [r7, #19]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d02b      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800267a:	d109      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a02      	ldr	r2, [pc, #8]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002686:	60d3      	str	r3, [r2, #12]
 8002688:	e014      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002694:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002698:	d10c      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3304      	adds	r3, #4
 800269e:	2101      	movs	r1, #1
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 f867 	bl	8002774 <RCCEx_PLLSAI1_Config>
 80026a6:	4603      	mov	r3, r0
 80026a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026aa:	7cfb      	ldrb	r3, [r7, #19]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d02f      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026c0:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ce:	4928      	ldr	r1, [pc, #160]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026de:	d10d      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3304      	adds	r3, #4
 80026e4:	2102      	movs	r1, #2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f844 	bl	8002774 <RCCEx_PLLSAI1_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d014      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	74bb      	strb	r3, [r7, #18]
 80026fa:	e011      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002704:	d10c      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3320      	adds	r3, #32
 800270a:	2102      	movs	r1, #2
 800270c:	4618      	mov	r0, r3
 800270e:	f000 f925 	bl	800295c <RCCEx_PLLSAI2_Config>
 8002712:	4603      	mov	r3, r0
 8002714:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800273a:	490d      	ldr	r1, [pc, #52]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800275e:	4904      	ldr	r1, [pc, #16]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002766:	7cbb      	ldrb	r3, [r7, #18]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000

08002774 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002782:	4b75      	ldr	r3, [pc, #468]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d018      	beq.n	80027c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800278e:	4b72      	ldr	r3, [pc, #456]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0203 	and.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d10d      	bne.n	80027ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
       ||
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027a6:	4b6c      	ldr	r3, [pc, #432]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
       ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d047      	beq.n	800284a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e044      	b.n	800284a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d018      	beq.n	80027fa <RCCEx_PLLSAI1_Config+0x86>
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d825      	bhi.n	8002818 <RCCEx_PLLSAI1_Config+0xa4>
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d002      	beq.n	80027d6 <RCCEx_PLLSAI1_Config+0x62>
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d009      	beq.n	80027e8 <RCCEx_PLLSAI1_Config+0x74>
 80027d4:	e020      	b.n	8002818 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027d6:	4b60      	ldr	r3, [pc, #384]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d11d      	bne.n	800281e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e6:	e01a      	b.n	800281e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027e8:	4b5b      	ldr	r3, [pc, #364]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d116      	bne.n	8002822 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f8:	e013      	b.n	8002822 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027fa:	4b57      	ldr	r3, [pc, #348]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002806:	4b54      	ldr	r3, [pc, #336]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002816:	e006      	b.n	8002826 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e004      	b.n	8002828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800281e:	bf00      	nop
 8002820:	e002      	b.n	8002828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002826:	bf00      	nop
    }

    if(status == HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10d      	bne.n	800284a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800282e:	4b4a      	ldr	r3, [pc, #296]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	430b      	orrs	r3, r1
 8002844:	4944      	ldr	r1, [pc, #272]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d17d      	bne.n	800294c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002850:	4b41      	ldr	r3, [pc, #260]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a40      	ldr	r2, [pc, #256]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002856:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800285a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800285c:	f7fe fad2 	bl	8000e04 <HAL_GetTick>
 8002860:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002862:	e009      	b.n	8002878 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002864:	f7fe face 	bl	8000e04 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d902      	bls.n	8002878 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	73fb      	strb	r3, [r7, #15]
        break;
 8002876:	e005      	b.n	8002884 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002878:	4b37      	ldr	r3, [pc, #220]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ef      	bne.n	8002864 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d160      	bne.n	800294c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d111      	bne.n	80028b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002890:	4b31      	ldr	r3, [pc, #196]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6892      	ldr	r2, [r2, #8]
 80028a0:	0211      	lsls	r1, r2, #8
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68d2      	ldr	r2, [r2, #12]
 80028a6:	0912      	lsrs	r2, r2, #4
 80028a8:	0452      	lsls	r2, r2, #17
 80028aa:	430a      	orrs	r2, r1
 80028ac:	492a      	ldr	r1, [pc, #168]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	610b      	str	r3, [r1, #16]
 80028b2:	e027      	b.n	8002904 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d112      	bne.n	80028e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ba:	4b27      	ldr	r3, [pc, #156]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6892      	ldr	r2, [r2, #8]
 80028ca:	0211      	lsls	r1, r2, #8
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6912      	ldr	r2, [r2, #16]
 80028d0:	0852      	lsrs	r2, r2, #1
 80028d2:	3a01      	subs	r2, #1
 80028d4:	0552      	lsls	r2, r2, #21
 80028d6:	430a      	orrs	r2, r1
 80028d8:	491f      	ldr	r1, [pc, #124]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	610b      	str	r3, [r1, #16]
 80028de:	e011      	b.n	8002904 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6892      	ldr	r2, [r2, #8]
 80028f0:	0211      	lsls	r1, r2, #8
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6952      	ldr	r2, [r2, #20]
 80028f6:	0852      	lsrs	r2, r2, #1
 80028f8:	3a01      	subs	r2, #1
 80028fa:	0652      	lsls	r2, r2, #25
 80028fc:	430a      	orrs	r2, r1
 80028fe:	4916      	ldr	r1, [pc, #88]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a13      	ldr	r2, [pc, #76]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800290e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe fa78 	bl	8000e04 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002916:	e009      	b.n	800292c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002918:	f7fe fa74 	bl	8000e04 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d902      	bls.n	800292c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	73fb      	strb	r3, [r7, #15]
          break;
 800292a:	e005      	b.n	8002938 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ef      	beq.n	8002918 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	4904      	ldr	r1, [pc, #16]	; (8002958 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000

0800295c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800296a:	4b6a      	ldr	r3, [pc, #424]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d018      	beq.n	80029a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002976:	4b67      	ldr	r3, [pc, #412]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0203 	and.w	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d10d      	bne.n	80029a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
       ||
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800298e:	4b61      	ldr	r3, [pc, #388]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
       ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d047      	beq.n	8002a32 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	e044      	b.n	8002a32 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d018      	beq.n	80029e2 <RCCEx_PLLSAI2_Config+0x86>
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d825      	bhi.n	8002a00 <RCCEx_PLLSAI2_Config+0xa4>
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d002      	beq.n	80029be <RCCEx_PLLSAI2_Config+0x62>
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d009      	beq.n	80029d0 <RCCEx_PLLSAI2_Config+0x74>
 80029bc:	e020      	b.n	8002a00 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029be:	4b55      	ldr	r3, [pc, #340]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d11d      	bne.n	8002a06 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ce:	e01a      	b.n	8002a06 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029d0:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d116      	bne.n	8002a0a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e0:	e013      	b.n	8002a0a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029e2:	4b4c      	ldr	r3, [pc, #304]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10f      	bne.n	8002a0e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ee:	4b49      	ldr	r3, [pc, #292]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029fe:	e006      	b.n	8002a0e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      break;
 8002a04:	e004      	b.n	8002a10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a06:	bf00      	nop
 8002a08:	e002      	b.n	8002a10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e000      	b.n	8002a10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10d      	bne.n	8002a32 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a16:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6819      	ldr	r1, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	430b      	orrs	r3, r1
 8002a2c:	4939      	ldr	r1, [pc, #228]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d167      	bne.n	8002b08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a38:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a35      	ldr	r2, [pc, #212]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a44:	f7fe f9de 	bl	8000e04 <HAL_GetTick>
 8002a48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a4a:	e009      	b.n	8002a60 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a4c:	f7fe f9da 	bl	8000e04 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d902      	bls.n	8002a60 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a5e:	e005      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a60:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ef      	bne.n	8002a4c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d14a      	bne.n	8002b08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d111      	bne.n	8002a9c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a78:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6892      	ldr	r2, [r2, #8]
 8002a88:	0211      	lsls	r1, r2, #8
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68d2      	ldr	r2, [r2, #12]
 8002a8e:	0912      	lsrs	r2, r2, #4
 8002a90:	0452      	lsls	r2, r2, #17
 8002a92:	430a      	orrs	r2, r1
 8002a94:	491f      	ldr	r1, [pc, #124]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	614b      	str	r3, [r1, #20]
 8002a9a:	e011      	b.n	8002ac0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002aa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6892      	ldr	r2, [r2, #8]
 8002aac:	0211      	lsls	r1, r2, #8
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6912      	ldr	r2, [r2, #16]
 8002ab2:	0852      	lsrs	r2, r2, #1
 8002ab4:	3a01      	subs	r2, #1
 8002ab6:	0652      	lsls	r2, r2, #25
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	4916      	ldr	r1, [pc, #88]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ac0:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a13      	ldr	r2, [pc, #76]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7fe f99a 	bl	8000e04 <HAL_GetTick>
 8002ad0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ad2:	e009      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ad4:	f7fe f996 	bl	8000e04 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d902      	bls.n	8002ae8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ae6:	e005      	b.n	8002af4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ef      	beq.n	8002ad4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	4904      	ldr	r1, [pc, #16]	; (8002b14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000

08002b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e049      	b.n	8002bbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fd ff3c 	bl	80009bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4610      	mov	r0, r2
 8002b58:	f000 fb7a 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e049      	b.n	8002c6c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d106      	bne.n	8002bf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f841 	bl	8002c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3304      	adds	r3, #4
 8002c02:	4619      	mov	r1, r3
 8002c04:	4610      	mov	r0, r2
 8002c06:	f000 fb23 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d109      	bne.n	8002cac <HAL_TIM_PWM_Start+0x24>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	bf14      	ite	ne
 8002ca4:	2301      	movne	r3, #1
 8002ca6:	2300      	moveq	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e03c      	b.n	8002d26 <HAL_TIM_PWM_Start+0x9e>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d109      	bne.n	8002cc6 <HAL_TIM_PWM_Start+0x3e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	bf14      	ite	ne
 8002cbe:	2301      	movne	r3, #1
 8002cc0:	2300      	moveq	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	e02f      	b.n	8002d26 <HAL_TIM_PWM_Start+0x9e>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d109      	bne.n	8002ce0 <HAL_TIM_PWM_Start+0x58>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e022      	b.n	8002d26 <HAL_TIM_PWM_Start+0x9e>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d109      	bne.n	8002cfa <HAL_TIM_PWM_Start+0x72>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	bf14      	ite	ne
 8002cf2:	2301      	movne	r3, #1
 8002cf4:	2300      	moveq	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	e015      	b.n	8002d26 <HAL_TIM_PWM_Start+0x9e>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d109      	bne.n	8002d14 <HAL_TIM_PWM_Start+0x8c>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	e008      	b.n	8002d26 <HAL_TIM_PWM_Start+0x9e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e09c      	b.n	8002e68 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d104      	bne.n	8002d3e <HAL_TIM_PWM_Start+0xb6>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d3c:	e023      	b.n	8002d86 <HAL_TIM_PWM_Start+0xfe>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d104      	bne.n	8002d4e <HAL_TIM_PWM_Start+0xc6>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d4c:	e01b      	b.n	8002d86 <HAL_TIM_PWM_Start+0xfe>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d104      	bne.n	8002d5e <HAL_TIM_PWM_Start+0xd6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d5c:	e013      	b.n	8002d86 <HAL_TIM_PWM_Start+0xfe>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b0c      	cmp	r3, #12
 8002d62:	d104      	bne.n	8002d6e <HAL_TIM_PWM_Start+0xe6>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d6c:	e00b      	b.n	8002d86 <HAL_TIM_PWM_Start+0xfe>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d104      	bne.n	8002d7e <HAL_TIM_PWM_Start+0xf6>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d7c:	e003      	b.n	8002d86 <HAL_TIM_PWM_Start+0xfe>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	6839      	ldr	r1, [r7, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fe68 	bl	8003a64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a35      	ldr	r2, [pc, #212]	; (8002e70 <HAL_TIM_PWM_Start+0x1e8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_TIM_PWM_Start+0x13e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a34      	ldr	r2, [pc, #208]	; (8002e74 <HAL_TIM_PWM_Start+0x1ec>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_TIM_PWM_Start+0x13e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a32      	ldr	r2, [pc, #200]	; (8002e78 <HAL_TIM_PWM_Start+0x1f0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_TIM_PWM_Start+0x13e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a31      	ldr	r2, [pc, #196]	; (8002e7c <HAL_TIM_PWM_Start+0x1f4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_TIM_PWM_Start+0x13e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a2f      	ldr	r2, [pc, #188]	; (8002e80 <HAL_TIM_PWM_Start+0x1f8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_TIM_PWM_Start+0x142>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_TIM_PWM_Start+0x144>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d007      	beq.n	8002de0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dde:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a22      	ldr	r2, [pc, #136]	; (8002e70 <HAL_TIM_PWM_Start+0x1e8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d01d      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x19e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df2:	d018      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x19e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <HAL_TIM_PWM_Start+0x1fc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x19e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <HAL_TIM_PWM_Start+0x200>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00e      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x19e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <HAL_TIM_PWM_Start+0x204>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d009      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x19e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a17      	ldr	r2, [pc, #92]	; (8002e74 <HAL_TIM_PWM_Start+0x1ec>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x19e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a15      	ldr	r2, [pc, #84]	; (8002e78 <HAL_TIM_PWM_Start+0x1f0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d115      	bne.n	8002e52 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_TIM_PWM_Start+0x208>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b06      	cmp	r3, #6
 8002e36:	d015      	beq.n	8002e64 <HAL_TIM_PWM_Start+0x1dc>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3e:	d011      	beq.n	8002e64 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e50:	e008      	b.n	8002e64 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0201 	orr.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e000      	b.n	8002e66 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40013400 	.word	0x40013400
 8002e78:	40014000 	.word	0x40014000
 8002e7c:	40014400 	.word	0x40014400
 8002e80:	40014800 	.word	0x40014800
 8002e84:	40000400 	.word	0x40000400
 8002e88:	40000800 	.word	0x40000800
 8002e8c:	40000c00 	.word	0x40000c00
 8002e90:	00010007 	.word	0x00010007

08002e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e0ff      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b14      	cmp	r3, #20
 8002ebe:	f200 80f0 	bhi.w	80030a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002f1d 	.word	0x08002f1d
 8002ecc:	080030a3 	.word	0x080030a3
 8002ed0:	080030a3 	.word	0x080030a3
 8002ed4:	080030a3 	.word	0x080030a3
 8002ed8:	08002f5d 	.word	0x08002f5d
 8002edc:	080030a3 	.word	0x080030a3
 8002ee0:	080030a3 	.word	0x080030a3
 8002ee4:	080030a3 	.word	0x080030a3
 8002ee8:	08002f9f 	.word	0x08002f9f
 8002eec:	080030a3 	.word	0x080030a3
 8002ef0:	080030a3 	.word	0x080030a3
 8002ef4:	080030a3 	.word	0x080030a3
 8002ef8:	08002fdf 	.word	0x08002fdf
 8002efc:	080030a3 	.word	0x080030a3
 8002f00:	080030a3 	.word	0x080030a3
 8002f04:	080030a3 	.word	0x080030a3
 8002f08:	08003021 	.word	0x08003021
 8002f0c:	080030a3 	.word	0x080030a3
 8002f10:	080030a3 	.word	0x080030a3
 8002f14:	080030a3 	.word	0x080030a3
 8002f18:	08003061 	.word	0x08003061
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fa2e 	bl	8003384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0208 	orr.w	r2, r2, #8
 8002f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0204 	bic.w	r2, r2, #4
 8002f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6999      	ldr	r1, [r3, #24]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	619a      	str	r2, [r3, #24]
      break;
 8002f5a:	e0a5      	b.n	80030a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fa9e 	bl	80034a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6999      	ldr	r1, [r3, #24]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	021a      	lsls	r2, r3, #8
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	619a      	str	r2, [r3, #24]
      break;
 8002f9c:	e084      	b.n	80030a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fb07 	bl	80035b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0208 	orr.w	r2, r2, #8
 8002fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69da      	ldr	r2, [r3, #28]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0204 	bic.w	r2, r2, #4
 8002fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69d9      	ldr	r1, [r3, #28]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	61da      	str	r2, [r3, #28]
      break;
 8002fdc:	e064      	b.n	80030a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fb6f 	bl	80036c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69d9      	ldr	r1, [r3, #28]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	021a      	lsls	r2, r3, #8
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	61da      	str	r2, [r3, #28]
      break;
 800301e:	e043      	b.n	80030a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fbb8 	bl	800379c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0208 	orr.w	r2, r2, #8
 800303a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0204 	bic.w	r2, r2, #4
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800305e:	e023      	b.n	80030a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fbfc 	bl	8003864 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800307a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800308a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	021a      	lsls	r2, r3, #8
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030a0:	e002      	b.n	80030a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
      break;
 80030a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop

080030bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_TIM_ConfigClockSource+0x1c>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e0b6      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x18a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003114:	d03e      	beq.n	8003194 <HAL_TIM_ConfigClockSource+0xd8>
 8003116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311a:	f200 8087 	bhi.w	800322c <HAL_TIM_ConfigClockSource+0x170>
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	f000 8086 	beq.w	8003232 <HAL_TIM_ConfigClockSource+0x176>
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312a:	d87f      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x170>
 800312c:	2b70      	cmp	r3, #112	; 0x70
 800312e:	d01a      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0xaa>
 8003130:	2b70      	cmp	r3, #112	; 0x70
 8003132:	d87b      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x170>
 8003134:	2b60      	cmp	r3, #96	; 0x60
 8003136:	d050      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x11e>
 8003138:	2b60      	cmp	r3, #96	; 0x60
 800313a:	d877      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x170>
 800313c:	2b50      	cmp	r3, #80	; 0x50
 800313e:	d03c      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0xfe>
 8003140:	2b50      	cmp	r3, #80	; 0x50
 8003142:	d873      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x170>
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d058      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x13e>
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d86f      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x170>
 800314c:	2b30      	cmp	r3, #48	; 0x30
 800314e:	d064      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15e>
 8003150:	2b30      	cmp	r3, #48	; 0x30
 8003152:	d86b      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x170>
 8003154:	2b20      	cmp	r3, #32
 8003156:	d060      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15e>
 8003158:	2b20      	cmp	r3, #32
 800315a:	d867      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x170>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d05c      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15e>
 8003160:	2b10      	cmp	r3, #16
 8003162:	d05a      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15e>
 8003164:	e062      	b.n	800322c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003176:	f000 fc55 	bl	8003a24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	609a      	str	r2, [r3, #8]
      break;
 8003192:	e04f      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031a4:	f000 fc3e 	bl	8003a24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b6:	609a      	str	r2, [r3, #8]
      break;
 80031b8:	e03c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c6:	461a      	mov	r2, r3
 80031c8:	f000 fbb2 	bl	8003930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2150      	movs	r1, #80	; 0x50
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fc0b 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 80031d8:	e02c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031e6:	461a      	mov	r2, r3
 80031e8:	f000 fbd1 	bl	800398e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2160      	movs	r1, #96	; 0x60
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fbfb 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 80031f8:	e01c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003206:	461a      	mov	r2, r3
 8003208:	f000 fb92 	bl	8003930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2140      	movs	r1, #64	; 0x40
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fbeb 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 8003218:	e00c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f000 fbe2 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 800322a:	e003      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      break;
 8003230:	e000      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a40      	ldr	r2, [pc, #256]	; (8003364 <TIM_Base_SetConfig+0x114>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d013      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326e:	d00f      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a3d      	ldr	r2, [pc, #244]	; (8003368 <TIM_Base_SetConfig+0x118>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00b      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a3c      	ldr	r2, [pc, #240]	; (800336c <TIM_Base_SetConfig+0x11c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d007      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a3b      	ldr	r2, [pc, #236]	; (8003370 <TIM_Base_SetConfig+0x120>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a3a      	ldr	r2, [pc, #232]	; (8003374 <TIM_Base_SetConfig+0x124>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d108      	bne.n	80032a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2f      	ldr	r2, [pc, #188]	; (8003364 <TIM_Base_SetConfig+0x114>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01f      	beq.n	80032ea <TIM_Base_SetConfig+0x9a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b0:	d01b      	beq.n	80032ea <TIM_Base_SetConfig+0x9a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <TIM_Base_SetConfig+0x118>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d017      	beq.n	80032ea <TIM_Base_SetConfig+0x9a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2b      	ldr	r2, [pc, #172]	; (800336c <TIM_Base_SetConfig+0x11c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <TIM_Base_SetConfig+0x9a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a2a      	ldr	r2, [pc, #168]	; (8003370 <TIM_Base_SetConfig+0x120>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00f      	beq.n	80032ea <TIM_Base_SetConfig+0x9a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a29      	ldr	r2, [pc, #164]	; (8003374 <TIM_Base_SetConfig+0x124>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00b      	beq.n	80032ea <TIM_Base_SetConfig+0x9a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a28      	ldr	r2, [pc, #160]	; (8003378 <TIM_Base_SetConfig+0x128>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <TIM_Base_SetConfig+0x9a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a27      	ldr	r2, [pc, #156]	; (800337c <TIM_Base_SetConfig+0x12c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d003      	beq.n	80032ea <TIM_Base_SetConfig+0x9a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a26      	ldr	r2, [pc, #152]	; (8003380 <TIM_Base_SetConfig+0x130>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d108      	bne.n	80032fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a10      	ldr	r2, [pc, #64]	; (8003364 <TIM_Base_SetConfig+0x114>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00f      	beq.n	8003348 <TIM_Base_SetConfig+0xf8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a12      	ldr	r2, [pc, #72]	; (8003374 <TIM_Base_SetConfig+0x124>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00b      	beq.n	8003348 <TIM_Base_SetConfig+0xf8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a11      	ldr	r2, [pc, #68]	; (8003378 <TIM_Base_SetConfig+0x128>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <TIM_Base_SetConfig+0xf8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a10      	ldr	r2, [pc, #64]	; (800337c <TIM_Base_SetConfig+0x12c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0xf8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a0f      	ldr	r2, [pc, #60]	; (8003380 <TIM_Base_SetConfig+0x130>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d103      	bne.n	8003350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	615a      	str	r2, [r3, #20]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800
 8003370:	40000c00 	.word	0x40000c00
 8003374:	40013400 	.word	0x40013400
 8003378:	40014000 	.word	0x40014000
 800337c:	40014400 	.word	0x40014400
 8003380:	40014800 	.word	0x40014800

08003384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f023 0201 	bic.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f023 0302 	bic.w	r3, r3, #2
 80033d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a2c      	ldr	r2, [pc, #176]	; (8003490 <TIM_OC1_SetConfig+0x10c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00f      	beq.n	8003404 <TIM_OC1_SetConfig+0x80>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <TIM_OC1_SetConfig+0x110>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00b      	beq.n	8003404 <TIM_OC1_SetConfig+0x80>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a2a      	ldr	r2, [pc, #168]	; (8003498 <TIM_OC1_SetConfig+0x114>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d007      	beq.n	8003404 <TIM_OC1_SetConfig+0x80>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a29      	ldr	r2, [pc, #164]	; (800349c <TIM_OC1_SetConfig+0x118>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d003      	beq.n	8003404 <TIM_OC1_SetConfig+0x80>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a28      	ldr	r2, [pc, #160]	; (80034a0 <TIM_OC1_SetConfig+0x11c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10c      	bne.n	800341e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0308 	bic.w	r3, r3, #8
 800340a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f023 0304 	bic.w	r3, r3, #4
 800341c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <TIM_OC1_SetConfig+0x10c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00f      	beq.n	8003446 <TIM_OC1_SetConfig+0xc2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <TIM_OC1_SetConfig+0x110>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00b      	beq.n	8003446 <TIM_OC1_SetConfig+0xc2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a19      	ldr	r2, [pc, #100]	; (8003498 <TIM_OC1_SetConfig+0x114>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <TIM_OC1_SetConfig+0xc2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a18      	ldr	r2, [pc, #96]	; (800349c <TIM_OC1_SetConfig+0x118>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_OC1_SetConfig+0xc2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a17      	ldr	r2, [pc, #92]	; (80034a0 <TIM_OC1_SetConfig+0x11c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d111      	bne.n	800346a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800344c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	621a      	str	r2, [r3, #32]
}
 8003484:	bf00      	nop
 8003486:	371c      	adds	r7, #28
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40012c00 	.word	0x40012c00
 8003494:	40013400 	.word	0x40013400
 8003498:	40014000 	.word	0x40014000
 800349c:	40014400 	.word	0x40014400
 80034a0:	40014800 	.word	0x40014800

080034a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f023 0210 	bic.w	r2, r3, #16
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0320 	bic.w	r3, r3, #32
 80034f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a28      	ldr	r2, [pc, #160]	; (80035a4 <TIM_OC2_SetConfig+0x100>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d003      	beq.n	8003510 <TIM_OC2_SetConfig+0x6c>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a27      	ldr	r2, [pc, #156]	; (80035a8 <TIM_OC2_SetConfig+0x104>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d10d      	bne.n	800352c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800352a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <TIM_OC2_SetConfig+0x100>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00f      	beq.n	8003554 <TIM_OC2_SetConfig+0xb0>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <TIM_OC2_SetConfig+0x104>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00b      	beq.n	8003554 <TIM_OC2_SetConfig+0xb0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <TIM_OC2_SetConfig+0x108>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d007      	beq.n	8003554 <TIM_OC2_SetConfig+0xb0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a1a      	ldr	r2, [pc, #104]	; (80035b0 <TIM_OC2_SetConfig+0x10c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_OC2_SetConfig+0xb0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a19      	ldr	r2, [pc, #100]	; (80035b4 <TIM_OC2_SetConfig+0x110>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d113      	bne.n	800357c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800355a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40012c00 	.word	0x40012c00
 80035a8:	40013400 	.word	0x40013400
 80035ac:	40014000 	.word	0x40014000
 80035b0:	40014400 	.word	0x40014400
 80035b4:	40014800 	.word	0x40014800

080035b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a27      	ldr	r2, [pc, #156]	; (80036b4 <TIM_OC3_SetConfig+0xfc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d003      	beq.n	8003622 <TIM_OC3_SetConfig+0x6a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a26      	ldr	r2, [pc, #152]	; (80036b8 <TIM_OC3_SetConfig+0x100>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d10d      	bne.n	800363e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800363c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <TIM_OC3_SetConfig+0xfc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00f      	beq.n	8003666 <TIM_OC3_SetConfig+0xae>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a1b      	ldr	r2, [pc, #108]	; (80036b8 <TIM_OC3_SetConfig+0x100>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00b      	beq.n	8003666 <TIM_OC3_SetConfig+0xae>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a1a      	ldr	r2, [pc, #104]	; (80036bc <TIM_OC3_SetConfig+0x104>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d007      	beq.n	8003666 <TIM_OC3_SetConfig+0xae>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <TIM_OC3_SetConfig+0x108>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d003      	beq.n	8003666 <TIM_OC3_SetConfig+0xae>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <TIM_OC3_SetConfig+0x10c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d113      	bne.n	800368e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800366c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	621a      	str	r2, [r3, #32]
}
 80036a8:	bf00      	nop
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	40013400 	.word	0x40013400
 80036bc:	40014000 	.word	0x40014000
 80036c0:	40014400 	.word	0x40014400
 80036c4:	40014800 	.word	0x40014800

080036c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	031b      	lsls	r3, r3, #12
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a18      	ldr	r2, [pc, #96]	; (8003788 <TIM_OC4_SetConfig+0xc0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00f      	beq.n	800374c <TIM_OC4_SetConfig+0x84>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a17      	ldr	r2, [pc, #92]	; (800378c <TIM_OC4_SetConfig+0xc4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00b      	beq.n	800374c <TIM_OC4_SetConfig+0x84>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a16      	ldr	r2, [pc, #88]	; (8003790 <TIM_OC4_SetConfig+0xc8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <TIM_OC4_SetConfig+0x84>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a15      	ldr	r2, [pc, #84]	; (8003794 <TIM_OC4_SetConfig+0xcc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <TIM_OC4_SetConfig+0x84>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a14      	ldr	r2, [pc, #80]	; (8003798 <TIM_OC4_SetConfig+0xd0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d109      	bne.n	8003760 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	019b      	lsls	r3, r3, #6
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40013400 	.word	0x40013400
 8003790:	40014000 	.word	0x40014000
 8003794:	40014400 	.word	0x40014400
 8003798:	40014800 	.word	0x40014800

0800379c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80037e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	041b      	lsls	r3, r3, #16
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a17      	ldr	r2, [pc, #92]	; (8003850 <TIM_OC5_SetConfig+0xb4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00f      	beq.n	8003816 <TIM_OC5_SetConfig+0x7a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a16      	ldr	r2, [pc, #88]	; (8003854 <TIM_OC5_SetConfig+0xb8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00b      	beq.n	8003816 <TIM_OC5_SetConfig+0x7a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a15      	ldr	r2, [pc, #84]	; (8003858 <TIM_OC5_SetConfig+0xbc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <TIM_OC5_SetConfig+0x7a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a14      	ldr	r2, [pc, #80]	; (800385c <TIM_OC5_SetConfig+0xc0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <TIM_OC5_SetConfig+0x7a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a13      	ldr	r2, [pc, #76]	; (8003860 <TIM_OC5_SetConfig+0xc4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d109      	bne.n	800382a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	621a      	str	r2, [r3, #32]
}
 8003844:	bf00      	nop
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	40012c00 	.word	0x40012c00
 8003854:	40013400 	.word	0x40013400
 8003858:	40014000 	.word	0x40014000
 800385c:	40014400 	.word	0x40014400
 8003860:	40014800 	.word	0x40014800

08003864 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	051b      	lsls	r3, r3, #20
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a18      	ldr	r2, [pc, #96]	; (800391c <TIM_OC6_SetConfig+0xb8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00f      	beq.n	80038e0 <TIM_OC6_SetConfig+0x7c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a17      	ldr	r2, [pc, #92]	; (8003920 <TIM_OC6_SetConfig+0xbc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00b      	beq.n	80038e0 <TIM_OC6_SetConfig+0x7c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a16      	ldr	r2, [pc, #88]	; (8003924 <TIM_OC6_SetConfig+0xc0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d007      	beq.n	80038e0 <TIM_OC6_SetConfig+0x7c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a15      	ldr	r2, [pc, #84]	; (8003928 <TIM_OC6_SetConfig+0xc4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d003      	beq.n	80038e0 <TIM_OC6_SetConfig+0x7c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a14      	ldr	r2, [pc, #80]	; (800392c <TIM_OC6_SetConfig+0xc8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d109      	bne.n	80038f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	029b      	lsls	r3, r3, #10
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40012c00 	.word	0x40012c00
 8003920:	40013400 	.word	0x40013400
 8003924:	40014000 	.word	0x40014000
 8003928:	40014400 	.word	0x40014400
 800392c:	40014800 	.word	0x40014800

08003930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f023 0201 	bic.w	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800395a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f023 030a 	bic.w	r3, r3, #10
 800396c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800398e:	b480      	push	{r7}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f023 0210 	bic.w	r2, r3, #16
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	031b      	lsls	r3, r3, #12
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f043 0307 	orr.w	r3, r3, #7
 8003a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	609a      	str	r2, [r3, #8]
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	021a      	lsls	r2, r3, #8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	609a      	str	r2, [r3, #8]
}
 8003a58:	bf00      	nop
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2201      	movs	r2, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a1a      	ldr	r2, [r3, #32]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	401a      	ands	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a1a      	ldr	r2, [r3, #32]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e068      	b.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2e      	ldr	r2, [pc, #184]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d004      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a2d      	ldr	r2, [pc, #180]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d108      	bne.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01d      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3a:	d018      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1b      	ldr	r2, [pc, #108]	; (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1a      	ldr	r2, [pc, #104]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00e      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a18      	ldr	r2, [pc, #96]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a13      	ldr	r2, [pc, #76]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a14      	ldr	r2, [pc, #80]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10c      	bne.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40013400 	.word	0x40013400
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800
 8003bb8:	40000c00 	.word	0x40000c00
 8003bbc:	40014000 	.word	0x40014000

08003bc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e065      	b.n	8003ca8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a16      	ldr	r2, [pc, #88]	; (8003cb4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d115      	bne.n	8003c96 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	051b      	lsls	r3, r3, #20
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	40012c00 	.word	0x40012c00
 8003cb8:	40013400 	.word	0x40013400

08003cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e040      	b.n	8003d50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fc fec4 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2224      	movs	r2, #36	; 0x24
 8003ce8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0201 	bic.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fec0 	bl	8004a88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fc05 	bl	8004518 <UART_SetConfig>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e01b      	b.n	8003d50 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 ff3f 	bl	8004bcc <UART_CheckIdleState>
 8003d4e:	4603      	mov	r3, r0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	d178      	bne.n	8003e62 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_UART_Transmit+0x24>
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e071      	b.n	8003e64 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2221      	movs	r2, #33	; 0x21
 8003d8c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d8e:	f7fd f839 	bl	8000e04 <HAL_GetTick>
 8003d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	88fa      	ldrh	r2, [r7, #6]
 8003d98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	88fa      	ldrh	r2, [r7, #6]
 8003da0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dac:	d108      	bne.n	8003dc0 <HAL_UART_Transmit+0x68>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d104      	bne.n	8003dc0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	e003      	b.n	8003dc8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dc8:	e030      	b.n	8003e2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2180      	movs	r1, #128	; 0x80
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 ffa1 	bl	8004d1c <UART_WaitOnFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d004      	beq.n	8003dea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e03c      	b.n	8003e64 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10b      	bne.n	8003e08 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	881a      	ldrh	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dfc:	b292      	uxth	r2, r2
 8003dfe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	3302      	adds	r3, #2
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	e008      	b.n	8003e1a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	781a      	ldrb	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	b292      	uxth	r2, r2
 8003e12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	3301      	adds	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1c8      	bne.n	8003dca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2140      	movs	r1, #64	; 0x40
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 ff6a 	bl	8004d1c <UART_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e005      	b.n	8003e64 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e000      	b.n	8003e64 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
  }
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3720      	adds	r7, #32
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	; 0x28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d137      	bne.n	8003ef4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_UART_Receive_IT+0x24>
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e030      	b.n	8003ef6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a18      	ldr	r2, [pc, #96]	; (8003f00 <HAL_UART_Receive_IT+0x94>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d01f      	beq.n	8003ee4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d018      	beq.n	8003ee4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	623b      	str	r3, [r7, #32]
 8003ed2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	69f9      	ldr	r1, [r7, #28]
 8003ed6:	6a3a      	ldr	r2, [r7, #32]
 8003ed8:	e841 2300 	strex	r3, r2, [r1]
 8003edc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e6      	bne.n	8003eb2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 ff7e 	bl	8004dec <UART_Start_Receive_IT>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	e000      	b.n	8003ef6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3728      	adds	r7, #40	; 0x28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40008000 	.word	0x40008000

08003f04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b0ba      	sub	sp, #232	; 0xe8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003f2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f32:	4013      	ands	r3, r2
 8003f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003f38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d115      	bne.n	8003f6c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00f      	beq.n	8003f6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d009      	beq.n	8003f6c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 82ae 	beq.w	80044be <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	4798      	blx	r3
      }
      return;
 8003f6a:	e2a8      	b.n	80044be <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8117 	beq.w	80041a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003f86:	4b85      	ldr	r3, [pc, #532]	; (800419c <HAL_UART_IRQHandler+0x298>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 810a 	beq.w	80041a4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d011      	beq.n	8003fc0 <HAL_UART_IRQHandler+0xbc>
 8003f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2201      	movs	r2, #1
 8003fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d011      	beq.n	8003ff0 <HAL_UART_IRQHandler+0xec>
 8003fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe6:	f043 0204 	orr.w	r2, r3, #4
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d011      	beq.n	8004020 <HAL_UART_IRQHandler+0x11c>
 8003ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00b      	beq.n	8004020 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2204      	movs	r2, #4
 800400e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004016:	f043 0202 	orr.w	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d017      	beq.n	800405c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800402c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d105      	bne.n	8004044 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800403c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2208      	movs	r2, #8
 800404a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004052:	f043 0208 	orr.w	r2, r3, #8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800405c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004064:	2b00      	cmp	r3, #0
 8004066:	d012      	beq.n	800408e <HAL_UART_IRQHandler+0x18a>
 8004068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800406c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00c      	beq.n	800408e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800407c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004084:	f043 0220 	orr.w	r2, r3, #32
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8214 	beq.w	80044c2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800409a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	d005      	beq.n	80040e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d04f      	beq.n	8004186 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 ff46 	bl	8004f78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b40      	cmp	r3, #64	; 0x40
 80040f8:	d141      	bne.n	800417e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3308      	adds	r3, #8
 8004100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3308      	adds	r3, #8
 8004122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004126:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800412a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800413e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1d9      	bne.n	80040fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414a:	2b00      	cmp	r3, #0
 800414c:	d013      	beq.n	8004176 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004152:	4a13      	ldr	r2, [pc, #76]	; (80041a0 <HAL_UART_IRQHandler+0x29c>)
 8004154:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415a:	4618      	mov	r0, r3
 800415c:	f7fc ffd1 	bl	8001102 <HAL_DMA_Abort_IT>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d017      	beq.n	8004196 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004170:	4610      	mov	r0, r2
 8004172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004174:	e00f      	b.n	8004196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f9b8 	bl	80044ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417c:	e00b      	b.n	8004196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f9b4 	bl	80044ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	e007      	b.n	8004196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f9b0 	bl	80044ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004194:	e195      	b.n	80044c2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004196:	bf00      	nop
    return;
 8004198:	e193      	b.n	80044c2 <HAL_UART_IRQHandler+0x5be>
 800419a:	bf00      	nop
 800419c:	04000120 	.word	0x04000120
 80041a0:	08005041 	.word	0x08005041

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	f040 814e 	bne.w	800444a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8147 	beq.w	800444a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8140 	beq.w	800444a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2210      	movs	r2, #16
 80041d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	f040 80b8 	bne.w	8004352 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8167 	beq.w	80044c6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004202:	429a      	cmp	r2, r3
 8004204:	f080 815f 	bcs.w	80044c6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800420e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 8086 	bne.w	8004330 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800423c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004240:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800424e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004252:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800425a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1da      	bne.n	8004224 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3308      	adds	r3, #8
 8004274:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800427e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004280:	f023 0301 	bic.w	r3, r3, #1
 8004284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3308      	adds	r3, #8
 800428e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004292:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004296:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800429a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e1      	bne.n	800426e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3308      	adds	r3, #8
 80042b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e3      	bne.n	80042aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004300:	f023 0310 	bic.w	r3, r3, #16
 8004304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004312:	65bb      	str	r3, [r7, #88]	; 0x58
 8004314:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e4      	bne.n	80042f0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc feab 	bl	8001086 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004342:	b29b      	uxth	r3, r3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	b29b      	uxth	r3, r3
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8d8 	bl	8004500 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004350:	e0b9      	b.n	80044c6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800435e:	b29b      	uxth	r3, r3
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 80ab 	beq.w	80044ca <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80a6 	beq.w	80044ca <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	e853 3f00 	ldrex	r3, [r3]
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800438c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004392:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043a0:	647b      	str	r3, [r7, #68]	; 0x44
 80043a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e4      	bne.n	800437e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3308      	adds	r3, #8
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	623b      	str	r3, [r7, #32]
   return(result);
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	f023 0301 	bic.w	r3, r3, #1
 80043ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3308      	adds	r3, #8
 80043d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043d8:	633a      	str	r2, [r7, #48]	; 0x30
 80043da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e3      	bne.n	80043b4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	60fb      	str	r3, [r7, #12]
   return(result);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f023 0310 	bic.w	r3, r3, #16
 8004414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	69b9      	ldr	r1, [r7, #24]
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	617b      	str	r3, [r7, #20]
   return(result);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e4      	bne.n	8004400 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800443c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004440:	4619      	mov	r1, r3
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f85c 	bl	8004500 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004448:	e03f      	b.n	80044ca <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00e      	beq.n	8004474 <HAL_UART_IRQHandler+0x570>
 8004456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800445a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800446a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 ffe3 	bl	8005438 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004472:	e02d      	b.n	80044d0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00e      	beq.n	800449e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004488:	2b00      	cmp	r3, #0
 800448a:	d008      	beq.n	800449e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01c      	beq.n	80044ce <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	4798      	blx	r3
    }
    return;
 800449c:	e017      	b.n	80044ce <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800449e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d012      	beq.n	80044d0 <HAL_UART_IRQHandler+0x5cc>
 80044aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00c      	beq.n	80044d0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fdd8 	bl	800506c <UART_EndTransmit_IT>
    return;
 80044bc:	e008      	b.n	80044d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80044be:	bf00      	nop
 80044c0:	e006      	b.n	80044d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80044c2:	bf00      	nop
 80044c4:	e004      	b.n	80044d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80044c6:	bf00      	nop
 80044c8:	e002      	b.n	80044d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80044ca:	bf00      	nop
 80044cc:	e000      	b.n	80044d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80044ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80044d0:	37e8      	adds	r7, #232	; 0xe8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop

080044d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800451c:	b08a      	sub	sp, #40	; 0x28
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	431a      	orrs	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	431a      	orrs	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	4313      	orrs	r3, r2
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4ba4      	ldr	r3, [pc, #656]	; (80047d8 <UART_SetConfig+0x2c0>)
 8004548:	4013      	ands	r3, r2
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004550:	430b      	orrs	r3, r1
 8004552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a99      	ldr	r2, [pc, #612]	; (80047dc <UART_SetConfig+0x2c4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004580:	4313      	orrs	r3, r2
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004594:	430a      	orrs	r2, r1
 8004596:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a90      	ldr	r2, [pc, #576]	; (80047e0 <UART_SetConfig+0x2c8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d126      	bne.n	80045f0 <UART_SetConfig+0xd8>
 80045a2:	4b90      	ldr	r3, [pc, #576]	; (80047e4 <UART_SetConfig+0x2cc>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d81b      	bhi.n	80045e8 <UART_SetConfig+0xd0>
 80045b0:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <UART_SetConfig+0xa0>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045d9 	.word	0x080045d9
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045e1 	.word	0x080045e1
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ce:	e116      	b.n	80047fe <UART_SetConfig+0x2e6>
 80045d0:	2302      	movs	r3, #2
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d6:	e112      	b.n	80047fe <UART_SetConfig+0x2e6>
 80045d8:	2304      	movs	r3, #4
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045de:	e10e      	b.n	80047fe <UART_SetConfig+0x2e6>
 80045e0:	2308      	movs	r3, #8
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e6:	e10a      	b.n	80047fe <UART_SetConfig+0x2e6>
 80045e8:	2310      	movs	r3, #16
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ee:	e106      	b.n	80047fe <UART_SetConfig+0x2e6>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a7c      	ldr	r2, [pc, #496]	; (80047e8 <UART_SetConfig+0x2d0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d138      	bne.n	800466c <UART_SetConfig+0x154>
 80045fa:	4b7a      	ldr	r3, [pc, #488]	; (80047e4 <UART_SetConfig+0x2cc>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f003 030c 	and.w	r3, r3, #12
 8004604:	2b0c      	cmp	r3, #12
 8004606:	d82d      	bhi.n	8004664 <UART_SetConfig+0x14c>
 8004608:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <UART_SetConfig+0xf8>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004645 	.word	0x08004645
 8004614:	08004665 	.word	0x08004665
 8004618:	08004665 	.word	0x08004665
 800461c:	08004665 	.word	0x08004665
 8004620:	08004655 	.word	0x08004655
 8004624:	08004665 	.word	0x08004665
 8004628:	08004665 	.word	0x08004665
 800462c:	08004665 	.word	0x08004665
 8004630:	0800464d 	.word	0x0800464d
 8004634:	08004665 	.word	0x08004665
 8004638:	08004665 	.word	0x08004665
 800463c:	08004665 	.word	0x08004665
 8004640:	0800465d 	.word	0x0800465d
 8004644:	2300      	movs	r3, #0
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e0d8      	b.n	80047fe <UART_SetConfig+0x2e6>
 800464c:	2302      	movs	r3, #2
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e0d4      	b.n	80047fe <UART_SetConfig+0x2e6>
 8004654:	2304      	movs	r3, #4
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e0d0      	b.n	80047fe <UART_SetConfig+0x2e6>
 800465c:	2308      	movs	r3, #8
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004662:	e0cc      	b.n	80047fe <UART_SetConfig+0x2e6>
 8004664:	2310      	movs	r3, #16
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e0c8      	b.n	80047fe <UART_SetConfig+0x2e6>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a5e      	ldr	r2, [pc, #376]	; (80047ec <UART_SetConfig+0x2d4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d125      	bne.n	80046c2 <UART_SetConfig+0x1aa>
 8004676:	4b5b      	ldr	r3, [pc, #364]	; (80047e4 <UART_SetConfig+0x2cc>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004680:	2b30      	cmp	r3, #48	; 0x30
 8004682:	d016      	beq.n	80046b2 <UART_SetConfig+0x19a>
 8004684:	2b30      	cmp	r3, #48	; 0x30
 8004686:	d818      	bhi.n	80046ba <UART_SetConfig+0x1a2>
 8004688:	2b20      	cmp	r3, #32
 800468a:	d00a      	beq.n	80046a2 <UART_SetConfig+0x18a>
 800468c:	2b20      	cmp	r3, #32
 800468e:	d814      	bhi.n	80046ba <UART_SetConfig+0x1a2>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <UART_SetConfig+0x182>
 8004694:	2b10      	cmp	r3, #16
 8004696:	d008      	beq.n	80046aa <UART_SetConfig+0x192>
 8004698:	e00f      	b.n	80046ba <UART_SetConfig+0x1a2>
 800469a:	2300      	movs	r3, #0
 800469c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a0:	e0ad      	b.n	80047fe <UART_SetConfig+0x2e6>
 80046a2:	2302      	movs	r3, #2
 80046a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a8:	e0a9      	b.n	80047fe <UART_SetConfig+0x2e6>
 80046aa:	2304      	movs	r3, #4
 80046ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b0:	e0a5      	b.n	80047fe <UART_SetConfig+0x2e6>
 80046b2:	2308      	movs	r3, #8
 80046b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b8:	e0a1      	b.n	80047fe <UART_SetConfig+0x2e6>
 80046ba:	2310      	movs	r3, #16
 80046bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c0:	e09d      	b.n	80047fe <UART_SetConfig+0x2e6>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a4a      	ldr	r2, [pc, #296]	; (80047f0 <UART_SetConfig+0x2d8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d125      	bne.n	8004718 <UART_SetConfig+0x200>
 80046cc:	4b45      	ldr	r3, [pc, #276]	; (80047e4 <UART_SetConfig+0x2cc>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046d6:	2bc0      	cmp	r3, #192	; 0xc0
 80046d8:	d016      	beq.n	8004708 <UART_SetConfig+0x1f0>
 80046da:	2bc0      	cmp	r3, #192	; 0xc0
 80046dc:	d818      	bhi.n	8004710 <UART_SetConfig+0x1f8>
 80046de:	2b80      	cmp	r3, #128	; 0x80
 80046e0:	d00a      	beq.n	80046f8 <UART_SetConfig+0x1e0>
 80046e2:	2b80      	cmp	r3, #128	; 0x80
 80046e4:	d814      	bhi.n	8004710 <UART_SetConfig+0x1f8>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <UART_SetConfig+0x1d8>
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	d008      	beq.n	8004700 <UART_SetConfig+0x1e8>
 80046ee:	e00f      	b.n	8004710 <UART_SetConfig+0x1f8>
 80046f0:	2300      	movs	r3, #0
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f6:	e082      	b.n	80047fe <UART_SetConfig+0x2e6>
 80046f8:	2302      	movs	r3, #2
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fe:	e07e      	b.n	80047fe <UART_SetConfig+0x2e6>
 8004700:	2304      	movs	r3, #4
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004706:	e07a      	b.n	80047fe <UART_SetConfig+0x2e6>
 8004708:	2308      	movs	r3, #8
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470e:	e076      	b.n	80047fe <UART_SetConfig+0x2e6>
 8004710:	2310      	movs	r3, #16
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004716:	e072      	b.n	80047fe <UART_SetConfig+0x2e6>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a35      	ldr	r2, [pc, #212]	; (80047f4 <UART_SetConfig+0x2dc>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d12a      	bne.n	8004778 <UART_SetConfig+0x260>
 8004722:	4b30      	ldr	r3, [pc, #192]	; (80047e4 <UART_SetConfig+0x2cc>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004730:	d01a      	beq.n	8004768 <UART_SetConfig+0x250>
 8004732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004736:	d81b      	bhi.n	8004770 <UART_SetConfig+0x258>
 8004738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800473c:	d00c      	beq.n	8004758 <UART_SetConfig+0x240>
 800473e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004742:	d815      	bhi.n	8004770 <UART_SetConfig+0x258>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <UART_SetConfig+0x238>
 8004748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800474c:	d008      	beq.n	8004760 <UART_SetConfig+0x248>
 800474e:	e00f      	b.n	8004770 <UART_SetConfig+0x258>
 8004750:	2300      	movs	r3, #0
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004756:	e052      	b.n	80047fe <UART_SetConfig+0x2e6>
 8004758:	2302      	movs	r3, #2
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475e:	e04e      	b.n	80047fe <UART_SetConfig+0x2e6>
 8004760:	2304      	movs	r3, #4
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004766:	e04a      	b.n	80047fe <UART_SetConfig+0x2e6>
 8004768:	2308      	movs	r3, #8
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476e:	e046      	b.n	80047fe <UART_SetConfig+0x2e6>
 8004770:	2310      	movs	r3, #16
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e042      	b.n	80047fe <UART_SetConfig+0x2e6>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a17      	ldr	r2, [pc, #92]	; (80047dc <UART_SetConfig+0x2c4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d13a      	bne.n	80047f8 <UART_SetConfig+0x2e0>
 8004782:	4b18      	ldr	r3, [pc, #96]	; (80047e4 <UART_SetConfig+0x2cc>)
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004788:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800478c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004790:	d01a      	beq.n	80047c8 <UART_SetConfig+0x2b0>
 8004792:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004796:	d81b      	bhi.n	80047d0 <UART_SetConfig+0x2b8>
 8004798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479c:	d00c      	beq.n	80047b8 <UART_SetConfig+0x2a0>
 800479e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a2:	d815      	bhi.n	80047d0 <UART_SetConfig+0x2b8>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <UART_SetConfig+0x298>
 80047a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ac:	d008      	beq.n	80047c0 <UART_SetConfig+0x2a8>
 80047ae:	e00f      	b.n	80047d0 <UART_SetConfig+0x2b8>
 80047b0:	2300      	movs	r3, #0
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b6:	e022      	b.n	80047fe <UART_SetConfig+0x2e6>
 80047b8:	2302      	movs	r3, #2
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047be:	e01e      	b.n	80047fe <UART_SetConfig+0x2e6>
 80047c0:	2304      	movs	r3, #4
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c6:	e01a      	b.n	80047fe <UART_SetConfig+0x2e6>
 80047c8:	2308      	movs	r3, #8
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ce:	e016      	b.n	80047fe <UART_SetConfig+0x2e6>
 80047d0:	2310      	movs	r3, #16
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d6:	e012      	b.n	80047fe <UART_SetConfig+0x2e6>
 80047d8:	efff69f3 	.word	0xefff69f3
 80047dc:	40008000 	.word	0x40008000
 80047e0:	40013800 	.word	0x40013800
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40004400 	.word	0x40004400
 80047ec:	40004800 	.word	0x40004800
 80047f0:	40004c00 	.word	0x40004c00
 80047f4:	40005000 	.word	0x40005000
 80047f8:	2310      	movs	r3, #16
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a9f      	ldr	r2, [pc, #636]	; (8004a80 <UART_SetConfig+0x568>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d17a      	bne.n	80048fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800480c:	2b08      	cmp	r3, #8
 800480e:	d824      	bhi.n	800485a <UART_SetConfig+0x342>
 8004810:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <UART_SetConfig+0x300>)
 8004812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004816:	bf00      	nop
 8004818:	0800483d 	.word	0x0800483d
 800481c:	0800485b 	.word	0x0800485b
 8004820:	08004845 	.word	0x08004845
 8004824:	0800485b 	.word	0x0800485b
 8004828:	0800484b 	.word	0x0800484b
 800482c:	0800485b 	.word	0x0800485b
 8004830:	0800485b 	.word	0x0800485b
 8004834:	0800485b 	.word	0x0800485b
 8004838:	08004853 	.word	0x08004853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800483c:	f7fd fc24 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 8004840:	61f8      	str	r0, [r7, #28]
        break;
 8004842:	e010      	b.n	8004866 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004844:	4b8f      	ldr	r3, [pc, #572]	; (8004a84 <UART_SetConfig+0x56c>)
 8004846:	61fb      	str	r3, [r7, #28]
        break;
 8004848:	e00d      	b.n	8004866 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800484a:	f7fd fb85 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 800484e:	61f8      	str	r0, [r7, #28]
        break;
 8004850:	e009      	b.n	8004866 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004856:	61fb      	str	r3, [r7, #28]
        break;
 8004858:	e005      	b.n	8004866 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004864:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80fb 	beq.w	8004a64 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	4413      	add	r3, r2
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	429a      	cmp	r2, r3
 800487c:	d305      	bcc.n	800488a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	429a      	cmp	r2, r3
 8004888:	d903      	bls.n	8004892 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004890:	e0e8      	b.n	8004a64 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	2200      	movs	r2, #0
 8004896:	461c      	mov	r4, r3
 8004898:	4615      	mov	r5, r2
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	022b      	lsls	r3, r5, #8
 80048a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048a8:	0222      	lsls	r2, r4, #8
 80048aa:	68f9      	ldr	r1, [r7, #12]
 80048ac:	6849      	ldr	r1, [r1, #4]
 80048ae:	0849      	lsrs	r1, r1, #1
 80048b0:	2000      	movs	r0, #0
 80048b2:	4688      	mov	r8, r1
 80048b4:	4681      	mov	r9, r0
 80048b6:	eb12 0a08 	adds.w	sl, r2, r8
 80048ba:	eb43 0b09 	adc.w	fp, r3, r9
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	603b      	str	r3, [r7, #0]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048cc:	4650      	mov	r0, sl
 80048ce:	4659      	mov	r1, fp
 80048d0:	f7fb fcce 	bl	8000270 <__aeabi_uldivmod>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4613      	mov	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048e2:	d308      	bcc.n	80048f6 <UART_SetConfig+0x3de>
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ea:	d204      	bcs.n	80048f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	60da      	str	r2, [r3, #12]
 80048f4:	e0b6      	b.n	8004a64 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048fc:	e0b2      	b.n	8004a64 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004906:	d15e      	bne.n	80049c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800490c:	2b08      	cmp	r3, #8
 800490e:	d828      	bhi.n	8004962 <UART_SetConfig+0x44a>
 8004910:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <UART_SetConfig+0x400>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	0800493d 	.word	0x0800493d
 800491c:	08004945 	.word	0x08004945
 8004920:	0800494d 	.word	0x0800494d
 8004924:	08004963 	.word	0x08004963
 8004928:	08004953 	.word	0x08004953
 800492c:	08004963 	.word	0x08004963
 8004930:	08004963 	.word	0x08004963
 8004934:	08004963 	.word	0x08004963
 8004938:	0800495b 	.word	0x0800495b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800493c:	f7fd fba4 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 8004940:	61f8      	str	r0, [r7, #28]
        break;
 8004942:	e014      	b.n	800496e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004944:	f7fd fbb6 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 8004948:	61f8      	str	r0, [r7, #28]
        break;
 800494a:	e010      	b.n	800496e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800494c:	4b4d      	ldr	r3, [pc, #308]	; (8004a84 <UART_SetConfig+0x56c>)
 800494e:	61fb      	str	r3, [r7, #28]
        break;
 8004950:	e00d      	b.n	800496e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004952:	f7fd fb01 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8004956:	61f8      	str	r0, [r7, #28]
        break;
 8004958:	e009      	b.n	800496e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495e:	61fb      	str	r3, [r7, #28]
        break;
 8004960:	e005      	b.n	800496e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800496c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d077      	beq.n	8004a64 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	005a      	lsls	r2, r3, #1
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	085b      	lsrs	r3, r3, #1
 800497e:	441a      	add	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b0f      	cmp	r3, #15
 800498e:	d916      	bls.n	80049be <UART_SetConfig+0x4a6>
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004996:	d212      	bcs.n	80049be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f023 030f 	bic.w	r3, r3, #15
 80049a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	8afb      	ldrh	r3, [r7, #22]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	8afa      	ldrh	r2, [r7, #22]
 80049ba:	60da      	str	r2, [r3, #12]
 80049bc:	e052      	b.n	8004a64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049c4:	e04e      	b.n	8004a64 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d827      	bhi.n	8004a1e <UART_SetConfig+0x506>
 80049ce:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <UART_SetConfig+0x4bc>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	080049f9 	.word	0x080049f9
 80049d8:	08004a01 	.word	0x08004a01
 80049dc:	08004a09 	.word	0x08004a09
 80049e0:	08004a1f 	.word	0x08004a1f
 80049e4:	08004a0f 	.word	0x08004a0f
 80049e8:	08004a1f 	.word	0x08004a1f
 80049ec:	08004a1f 	.word	0x08004a1f
 80049f0:	08004a1f 	.word	0x08004a1f
 80049f4:	08004a17 	.word	0x08004a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f8:	f7fd fb46 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 80049fc:	61f8      	str	r0, [r7, #28]
        break;
 80049fe:	e014      	b.n	8004a2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a00:	f7fd fb58 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 8004a04:	61f8      	str	r0, [r7, #28]
        break;
 8004a06:	e010      	b.n	8004a2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a08:	4b1e      	ldr	r3, [pc, #120]	; (8004a84 <UART_SetConfig+0x56c>)
 8004a0a:	61fb      	str	r3, [r7, #28]
        break;
 8004a0c:	e00d      	b.n	8004a2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a0e:	f7fd faa3 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8004a12:	61f8      	str	r0, [r7, #28]
        break;
 8004a14:	e009      	b.n	8004a2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a1a:	61fb      	str	r3, [r7, #28]
        break;
 8004a1c:	e005      	b.n	8004a2a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a28:	bf00      	nop
    }

    if (pclk != 0U)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d019      	beq.n	8004a64 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	085a      	lsrs	r2, r3, #1
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	441a      	add	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	2b0f      	cmp	r3, #15
 8004a48:	d909      	bls.n	8004a5e <UART_SetConfig+0x546>
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a50:	d205      	bcs.n	8004a5e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60da      	str	r2, [r3, #12]
 8004a5c:	e002      	b.n	8004a64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3728      	adds	r7, #40	; 0x28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7e:	bf00      	nop
 8004a80:	40008000 	.word	0x40008000
 8004a84:	00f42400 	.word	0x00f42400

08004a88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01a      	beq.n	8004b9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b86:	d10a      	bne.n	8004b9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b098      	sub	sp, #96	; 0x60
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bdc:	f7fc f912 	bl	8000e04 <HAL_GetTick>
 8004be0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d12e      	bne.n	8004c4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f88c 	bl	8004d1c <UART_WaitOnFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d021      	beq.n	8004c4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c28:	647b      	str	r3, [r7, #68]	; 0x44
 8004c2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e6      	bne.n	8004c0a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e062      	b.n	8004d14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d149      	bne.n	8004cf0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c64:	2200      	movs	r2, #0
 8004c66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f856 	bl	8004d1c <UART_WaitOnFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d03c      	beq.n	8004cf0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	623b      	str	r3, [r7, #32]
   return(result);
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c94:	633b      	str	r3, [r7, #48]	; 0x30
 8004c96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e6      	bne.n	8004c76 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3308      	adds	r3, #8
 8004cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cc8:	61fa      	str	r2, [r7, #28]
 8004cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	69b9      	ldr	r1, [r7, #24]
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e5      	bne.n	8004ca8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e011      	b.n	8004d14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3758      	adds	r7, #88	; 0x58
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2c:	e049      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d34:	d045      	beq.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d36:	f7fc f865 	bl	8000e04 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d302      	bcc.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e048      	b.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d031      	beq.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d110      	bne.n	8004d8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2208      	movs	r2, #8
 8004d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f8ff 	bl	8004f78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e029      	b.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d9c:	d111      	bne.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f8e5 	bl	8004f78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e00f      	b.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	bf0c      	ite	eq
 8004dd2:	2301      	moveq	r3, #1
 8004dd4:	2300      	movne	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d0a6      	beq.n	8004d2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b097      	sub	sp, #92	; 0x5c
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	4613      	mov	r3, r2
 8004df8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	88fa      	ldrh	r2, [r7, #6]
 8004e0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1e:	d10e      	bne.n	8004e3e <UART_Start_Receive_IT+0x52>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d105      	bne.n	8004e34 <UART_Start_Receive_IT+0x48>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e32:	e02d      	b.n	8004e90 <UART_Start_Receive_IT+0xa4>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	22ff      	movs	r2, #255	; 0xff
 8004e38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e3c:	e028      	b.n	8004e90 <UART_Start_Receive_IT+0xa4>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10d      	bne.n	8004e62 <UART_Start_Receive_IT+0x76>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d104      	bne.n	8004e58 <UART_Start_Receive_IT+0x6c>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	22ff      	movs	r2, #255	; 0xff
 8004e52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e56:	e01b      	b.n	8004e90 <UART_Start_Receive_IT+0xa4>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	227f      	movs	r2, #127	; 0x7f
 8004e5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e60:	e016      	b.n	8004e90 <UART_Start_Receive_IT+0xa4>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e6a:	d10d      	bne.n	8004e88 <UART_Start_Receive_IT+0x9c>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d104      	bne.n	8004e7e <UART_Start_Receive_IT+0x92>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	227f      	movs	r2, #127	; 0x7f
 8004e78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e7c:	e008      	b.n	8004e90 <UART_Start_Receive_IT+0xa4>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	223f      	movs	r2, #63	; 0x3f
 8004e82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e86:	e003      	b.n	8004e90 <UART_Start_Receive_IT+0xa4>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2222      	movs	r2, #34	; 0x22
 8004e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ec0:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ec2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e5      	bne.n	8004ea0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004edc:	d107      	bne.n	8004eee <UART_Start_Receive_IT+0x102>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a21      	ldr	r2, [pc, #132]	; (8004f70 <UART_Start_Receive_IT+0x184>)
 8004eea:	669a      	str	r2, [r3, #104]	; 0x68
 8004eec:	e002      	b.n	8004ef4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a20      	ldr	r2, [pc, #128]	; (8004f74 <UART_Start_Receive_IT+0x188>)
 8004ef2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d019      	beq.n	8004f30 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004f10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e6      	bne.n	8004efc <UART_Start_Receive_IT+0x110>
 8004f2e:	e018      	b.n	8004f62 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f043 0320 	orr.w	r3, r3, #32
 8004f44:	653b      	str	r3, [r7, #80]	; 0x50
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f4e:	623b      	str	r3, [r7, #32]
 8004f50:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	69f9      	ldr	r1, [r7, #28]
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e6      	bne.n	8004f30 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	375c      	adds	r7, #92	; 0x5c
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	0800527d 	.word	0x0800527d
 8004f74:	080050c1 	.word	0x080050c1

08004f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b095      	sub	sp, #84	; 0x54
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f9e:	643b      	str	r3, [r7, #64]	; 0x40
 8004fa0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e6      	bne.n	8004f80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f023 0301 	bic.w	r3, r3, #1
 8004fc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3308      	adds	r3, #8
 8004fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fda:	e841 2300 	strex	r3, r2, [r1]
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1e5      	bne.n	8004fb2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d118      	bne.n	8005020 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f023 0310 	bic.w	r3, r3, #16
 8005002:	647b      	str	r3, [r7, #68]	; 0x44
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6979      	ldr	r1, [r7, #20]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	613b      	str	r3, [r7, #16]
   return(result);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e6      	bne.n	8004fee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005034:	bf00      	nop
 8005036:	3754      	adds	r7, #84	; 0x54
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff fa44 	bl	80044ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	60bb      	str	r3, [r7, #8]
   return(result);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005088:	61fb      	str	r3, [r7, #28]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6979      	ldr	r1, [r7, #20]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	613b      	str	r3, [r7, #16]
   return(result);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e6      	bne.n	8005074 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff fa10 	bl	80044d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050b8:	bf00      	nop
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b09c      	sub	sp, #112	; 0x70
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d8:	2b22      	cmp	r3, #34	; 0x22
 80050da:	f040 80be 	bne.w	800525a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80050e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80050ec:	b2d9      	uxtb	r1, r3
 80050ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f8:	400a      	ands	r2, r1
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	f040 80a3 	bne.w	800526e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005138:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800513c:	66bb      	str	r3, [r7, #104]	; 0x68
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005146:	65bb      	str	r3, [r7, #88]	; 0x58
 8005148:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800514c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e6      	bne.n	8005128 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3308      	adds	r3, #8
 8005160:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800516a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516c:	f023 0301 	bic.w	r3, r3, #1
 8005170:	667b      	str	r3, [r7, #100]	; 0x64
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3308      	adds	r3, #8
 8005178:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800517a:	647a      	str	r2, [r7, #68]	; 0x44
 800517c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e5      	bne.n	800515a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a34      	ldr	r2, [pc, #208]	; (8005278 <UART_RxISR_8BIT+0x1b8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d01f      	beq.n	80051ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d018      	beq.n	80051ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	623b      	str	r3, [r7, #32]
   return(result);
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051ce:	663b      	str	r3, [r7, #96]	; 0x60
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051d8:	633b      	str	r3, [r7, #48]	; 0x30
 80051da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e6      	bne.n	80051ba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d12e      	bne.n	8005252 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	60fb      	str	r3, [r7, #12]
   return(result);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0310 	bic.w	r3, r3, #16
 800520e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521c:	69b9      	ldr	r1, [r7, #24]
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	e841 2300 	strex	r3, r2, [r1]
 8005224:	617b      	str	r3, [r7, #20]
   return(result);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e6      	bne.n	80051fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f003 0310 	and.w	r3, r3, #16
 8005236:	2b10      	cmp	r3, #16
 8005238:	d103      	bne.n	8005242 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2210      	movs	r2, #16
 8005240:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff f958 	bl	8004500 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005250:	e00d      	b.n	800526e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fb f9a0 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 8005258:	e009      	b.n	800526e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	8b1b      	ldrh	r3, [r3, #24]
 8005260:	b29a      	uxth	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0208 	orr.w	r2, r2, #8
 800526a:	b292      	uxth	r2, r2
 800526c:	831a      	strh	r2, [r3, #24]
}
 800526e:	bf00      	nop
 8005270:	3770      	adds	r7, #112	; 0x70
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40008000 	.word	0x40008000

0800527c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b09c      	sub	sp, #112	; 0x70
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800528a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005294:	2b22      	cmp	r3, #34	; 0x22
 8005296:	f040 80be 	bne.w	8005416 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80052aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80052ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80052b2:	4013      	ands	r3, r2
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052be:	1c9a      	adds	r2, r3, #2
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f040 80a3 	bne.w	800542a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80052f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052f8:	667b      	str	r3, [r7, #100]	; 0x64
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005302:	657b      	str	r3, [r7, #84]	; 0x54
 8005304:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e6      	bne.n	80052e4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3308      	adds	r3, #8
 800531c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	663b      	str	r3, [r7, #96]	; 0x60
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3308      	adds	r3, #8
 8005334:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005336:	643a      	str	r2, [r7, #64]	; 0x40
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800533c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a34      	ldr	r2, [pc, #208]	; (8005434 <UART_RxISR_16BIT+0x1b8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d01f      	beq.n	80053a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d018      	beq.n	80053a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	61fb      	str	r3, [r7, #28]
   return(result);
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800538a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005396:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800539a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e6      	bne.n	8005376 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d12e      	bne.n	800540e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f023 0310 	bic.w	r3, r3, #16
 80053ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	6979      	ldr	r1, [r7, #20]
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	613b      	str	r3, [r7, #16]
   return(result);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e6      	bne.n	80053b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d103      	bne.n	80053fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2210      	movs	r2, #16
 80053fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff f87a 	bl	8004500 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800540c:	e00d      	b.n	800542a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fb f8c2 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 8005414:	e009      	b.n	800542a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	8b1b      	ldrh	r3, [r3, #24]
 800541c:	b29a      	uxth	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0208 	orr.w	r2, r2, #8
 8005426:	b292      	uxth	r2, r2
 8005428:	831a      	strh	r2, [r3, #24]
}
 800542a:	bf00      	nop
 800542c:	3770      	adds	r7, #112	; 0x70
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40008000 	.word	0x40008000

08005438 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <std>:
 800544c:	2300      	movs	r3, #0
 800544e:	b510      	push	{r4, lr}
 8005450:	4604      	mov	r4, r0
 8005452:	e9c0 3300 	strd	r3, r3, [r0]
 8005456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800545a:	6083      	str	r3, [r0, #8]
 800545c:	8181      	strh	r1, [r0, #12]
 800545e:	6643      	str	r3, [r0, #100]	; 0x64
 8005460:	81c2      	strh	r2, [r0, #14]
 8005462:	6183      	str	r3, [r0, #24]
 8005464:	4619      	mov	r1, r3
 8005466:	2208      	movs	r2, #8
 8005468:	305c      	adds	r0, #92	; 0x5c
 800546a:	f000 f8f4 	bl	8005656 <memset>
 800546e:	4b05      	ldr	r3, [pc, #20]	; (8005484 <std+0x38>)
 8005470:	6263      	str	r3, [r4, #36]	; 0x24
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <std+0x3c>)
 8005474:	62a3      	str	r3, [r4, #40]	; 0x28
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <std+0x40>)
 8005478:	62e3      	str	r3, [r4, #44]	; 0x2c
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <std+0x44>)
 800547c:	6224      	str	r4, [r4, #32]
 800547e:	6323      	str	r3, [r4, #48]	; 0x30
 8005480:	bd10      	pop	{r4, pc}
 8005482:	bf00      	nop
 8005484:	080055d1 	.word	0x080055d1
 8005488:	080055f3 	.word	0x080055f3
 800548c:	0800562b 	.word	0x0800562b
 8005490:	0800564f 	.word	0x0800564f

08005494 <stdio_exit_handler>:
 8005494:	4a02      	ldr	r2, [pc, #8]	; (80054a0 <stdio_exit_handler+0xc>)
 8005496:	4903      	ldr	r1, [pc, #12]	; (80054a4 <stdio_exit_handler+0x10>)
 8005498:	4803      	ldr	r0, [pc, #12]	; (80054a8 <stdio_exit_handler+0x14>)
 800549a:	f000 b869 	b.w	8005570 <_fwalk_sglue>
 800549e:	bf00      	nop
 80054a0:	2000000c 	.word	0x2000000c
 80054a4:	08005ff1 	.word	0x08005ff1
 80054a8:	20000018 	.word	0x20000018

080054ac <cleanup_stdio>:
 80054ac:	6841      	ldr	r1, [r0, #4]
 80054ae:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <cleanup_stdio+0x34>)
 80054b0:	4299      	cmp	r1, r3
 80054b2:	b510      	push	{r4, lr}
 80054b4:	4604      	mov	r4, r0
 80054b6:	d001      	beq.n	80054bc <cleanup_stdio+0x10>
 80054b8:	f000 fd9a 	bl	8005ff0 <_fflush_r>
 80054bc:	68a1      	ldr	r1, [r4, #8]
 80054be:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <cleanup_stdio+0x38>)
 80054c0:	4299      	cmp	r1, r3
 80054c2:	d002      	beq.n	80054ca <cleanup_stdio+0x1e>
 80054c4:	4620      	mov	r0, r4
 80054c6:	f000 fd93 	bl	8005ff0 <_fflush_r>
 80054ca:	68e1      	ldr	r1, [r4, #12]
 80054cc:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <cleanup_stdio+0x3c>)
 80054ce:	4299      	cmp	r1, r3
 80054d0:	d004      	beq.n	80054dc <cleanup_stdio+0x30>
 80054d2:	4620      	mov	r0, r4
 80054d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d8:	f000 bd8a 	b.w	8005ff0 <_fflush_r>
 80054dc:	bd10      	pop	{r4, pc}
 80054de:	bf00      	nop
 80054e0:	20000168 	.word	0x20000168
 80054e4:	200001d0 	.word	0x200001d0
 80054e8:	20000238 	.word	0x20000238

080054ec <global_stdio_init.part.0>:
 80054ec:	b510      	push	{r4, lr}
 80054ee:	4b0b      	ldr	r3, [pc, #44]	; (800551c <global_stdio_init.part.0+0x30>)
 80054f0:	4c0b      	ldr	r4, [pc, #44]	; (8005520 <global_stdio_init.part.0+0x34>)
 80054f2:	4a0c      	ldr	r2, [pc, #48]	; (8005524 <global_stdio_init.part.0+0x38>)
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	4620      	mov	r0, r4
 80054f8:	2200      	movs	r2, #0
 80054fa:	2104      	movs	r1, #4
 80054fc:	f7ff ffa6 	bl	800544c <std>
 8005500:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005504:	2201      	movs	r2, #1
 8005506:	2109      	movs	r1, #9
 8005508:	f7ff ffa0 	bl	800544c <std>
 800550c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005510:	2202      	movs	r2, #2
 8005512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005516:	2112      	movs	r1, #18
 8005518:	f7ff bf98 	b.w	800544c <std>
 800551c:	200002a0 	.word	0x200002a0
 8005520:	20000168 	.word	0x20000168
 8005524:	08005495 	.word	0x08005495

08005528 <__sfp_lock_acquire>:
 8005528:	4801      	ldr	r0, [pc, #4]	; (8005530 <__sfp_lock_acquire+0x8>)
 800552a:	f000 b90d 	b.w	8005748 <__retarget_lock_acquire_recursive>
 800552e:	bf00      	nop
 8005530:	200002a9 	.word	0x200002a9

08005534 <__sfp_lock_release>:
 8005534:	4801      	ldr	r0, [pc, #4]	; (800553c <__sfp_lock_release+0x8>)
 8005536:	f000 b908 	b.w	800574a <__retarget_lock_release_recursive>
 800553a:	bf00      	nop
 800553c:	200002a9 	.word	0x200002a9

08005540 <__sinit>:
 8005540:	b510      	push	{r4, lr}
 8005542:	4604      	mov	r4, r0
 8005544:	f7ff fff0 	bl	8005528 <__sfp_lock_acquire>
 8005548:	6a23      	ldr	r3, [r4, #32]
 800554a:	b11b      	cbz	r3, 8005554 <__sinit+0x14>
 800554c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005550:	f7ff bff0 	b.w	8005534 <__sfp_lock_release>
 8005554:	4b04      	ldr	r3, [pc, #16]	; (8005568 <__sinit+0x28>)
 8005556:	6223      	str	r3, [r4, #32]
 8005558:	4b04      	ldr	r3, [pc, #16]	; (800556c <__sinit+0x2c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f5      	bne.n	800554c <__sinit+0xc>
 8005560:	f7ff ffc4 	bl	80054ec <global_stdio_init.part.0>
 8005564:	e7f2      	b.n	800554c <__sinit+0xc>
 8005566:	bf00      	nop
 8005568:	080054ad 	.word	0x080054ad
 800556c:	200002a0 	.word	0x200002a0

08005570 <_fwalk_sglue>:
 8005570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005574:	4607      	mov	r7, r0
 8005576:	4688      	mov	r8, r1
 8005578:	4614      	mov	r4, r2
 800557a:	2600      	movs	r6, #0
 800557c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005580:	f1b9 0901 	subs.w	r9, r9, #1
 8005584:	d505      	bpl.n	8005592 <_fwalk_sglue+0x22>
 8005586:	6824      	ldr	r4, [r4, #0]
 8005588:	2c00      	cmp	r4, #0
 800558a:	d1f7      	bne.n	800557c <_fwalk_sglue+0xc>
 800558c:	4630      	mov	r0, r6
 800558e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005592:	89ab      	ldrh	r3, [r5, #12]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d907      	bls.n	80055a8 <_fwalk_sglue+0x38>
 8005598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800559c:	3301      	adds	r3, #1
 800559e:	d003      	beq.n	80055a8 <_fwalk_sglue+0x38>
 80055a0:	4629      	mov	r1, r5
 80055a2:	4638      	mov	r0, r7
 80055a4:	47c0      	blx	r8
 80055a6:	4306      	orrs	r6, r0
 80055a8:	3568      	adds	r5, #104	; 0x68
 80055aa:	e7e9      	b.n	8005580 <_fwalk_sglue+0x10>

080055ac <iprintf>:
 80055ac:	b40f      	push	{r0, r1, r2, r3}
 80055ae:	b507      	push	{r0, r1, r2, lr}
 80055b0:	4906      	ldr	r1, [pc, #24]	; (80055cc <iprintf+0x20>)
 80055b2:	ab04      	add	r3, sp, #16
 80055b4:	6808      	ldr	r0, [r1, #0]
 80055b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ba:	6881      	ldr	r1, [r0, #8]
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	f000 f9e7 	bl	8005990 <_vfiprintf_r>
 80055c2:	b003      	add	sp, #12
 80055c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055c8:	b004      	add	sp, #16
 80055ca:	4770      	bx	lr
 80055cc:	20000064 	.word	0x20000064

080055d0 <__sread>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	460c      	mov	r4, r1
 80055d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d8:	f000 f868 	bl	80056ac <_read_r>
 80055dc:	2800      	cmp	r0, #0
 80055de:	bfab      	itete	ge
 80055e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055e2:	89a3      	ldrhlt	r3, [r4, #12]
 80055e4:	181b      	addge	r3, r3, r0
 80055e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055ea:	bfac      	ite	ge
 80055ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80055ee:	81a3      	strhlt	r3, [r4, #12]
 80055f0:	bd10      	pop	{r4, pc}

080055f2 <__swrite>:
 80055f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f6:	461f      	mov	r7, r3
 80055f8:	898b      	ldrh	r3, [r1, #12]
 80055fa:	05db      	lsls	r3, r3, #23
 80055fc:	4605      	mov	r5, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	4616      	mov	r6, r2
 8005602:	d505      	bpl.n	8005610 <__swrite+0x1e>
 8005604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005608:	2302      	movs	r3, #2
 800560a:	2200      	movs	r2, #0
 800560c:	f000 f83c 	bl	8005688 <_lseek_r>
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800561a:	81a3      	strh	r3, [r4, #12]
 800561c:	4632      	mov	r2, r6
 800561e:	463b      	mov	r3, r7
 8005620:	4628      	mov	r0, r5
 8005622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005626:	f000 b853 	b.w	80056d0 <_write_r>

0800562a <__sseek>:
 800562a:	b510      	push	{r4, lr}
 800562c:	460c      	mov	r4, r1
 800562e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005632:	f000 f829 	bl	8005688 <_lseek_r>
 8005636:	1c43      	adds	r3, r0, #1
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	bf15      	itete	ne
 800563c:	6560      	strne	r0, [r4, #84]	; 0x54
 800563e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005646:	81a3      	strheq	r3, [r4, #12]
 8005648:	bf18      	it	ne
 800564a:	81a3      	strhne	r3, [r4, #12]
 800564c:	bd10      	pop	{r4, pc}

0800564e <__sclose>:
 800564e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005652:	f000 b809 	b.w	8005668 <_close_r>

08005656 <memset>:
 8005656:	4402      	add	r2, r0
 8005658:	4603      	mov	r3, r0
 800565a:	4293      	cmp	r3, r2
 800565c:	d100      	bne.n	8005660 <memset+0xa>
 800565e:	4770      	bx	lr
 8005660:	f803 1b01 	strb.w	r1, [r3], #1
 8005664:	e7f9      	b.n	800565a <memset+0x4>
	...

08005668 <_close_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	4d06      	ldr	r5, [pc, #24]	; (8005684 <_close_r+0x1c>)
 800566c:	2300      	movs	r3, #0
 800566e:	4604      	mov	r4, r0
 8005670:	4608      	mov	r0, r1
 8005672:	602b      	str	r3, [r5, #0]
 8005674:	f7fb faaf 	bl	8000bd6 <_close>
 8005678:	1c43      	adds	r3, r0, #1
 800567a:	d102      	bne.n	8005682 <_close_r+0x1a>
 800567c:	682b      	ldr	r3, [r5, #0]
 800567e:	b103      	cbz	r3, 8005682 <_close_r+0x1a>
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	bd38      	pop	{r3, r4, r5, pc}
 8005684:	200002a4 	.word	0x200002a4

08005688 <_lseek_r>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	4d07      	ldr	r5, [pc, #28]	; (80056a8 <_lseek_r+0x20>)
 800568c:	4604      	mov	r4, r0
 800568e:	4608      	mov	r0, r1
 8005690:	4611      	mov	r1, r2
 8005692:	2200      	movs	r2, #0
 8005694:	602a      	str	r2, [r5, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	f7fb fac4 	bl	8000c24 <_lseek>
 800569c:	1c43      	adds	r3, r0, #1
 800569e:	d102      	bne.n	80056a6 <_lseek_r+0x1e>
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	b103      	cbz	r3, 80056a6 <_lseek_r+0x1e>
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	bd38      	pop	{r3, r4, r5, pc}
 80056a8:	200002a4 	.word	0x200002a4

080056ac <_read_r>:
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	4d07      	ldr	r5, [pc, #28]	; (80056cc <_read_r+0x20>)
 80056b0:	4604      	mov	r4, r0
 80056b2:	4608      	mov	r0, r1
 80056b4:	4611      	mov	r1, r2
 80056b6:	2200      	movs	r2, #0
 80056b8:	602a      	str	r2, [r5, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	f7fb fa6e 	bl	8000b9c <_read>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d102      	bne.n	80056ca <_read_r+0x1e>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	b103      	cbz	r3, 80056ca <_read_r+0x1e>
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
 80056cc:	200002a4 	.word	0x200002a4

080056d0 <_write_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4d07      	ldr	r5, [pc, #28]	; (80056f0 <_write_r+0x20>)
 80056d4:	4604      	mov	r4, r0
 80056d6:	4608      	mov	r0, r1
 80056d8:	4611      	mov	r1, r2
 80056da:	2200      	movs	r2, #0
 80056dc:	602a      	str	r2, [r5, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	f7fa ff44 	bl	800056c <_write>
 80056e4:	1c43      	adds	r3, r0, #1
 80056e6:	d102      	bne.n	80056ee <_write_r+0x1e>
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	b103      	cbz	r3, 80056ee <_write_r+0x1e>
 80056ec:	6023      	str	r3, [r4, #0]
 80056ee:	bd38      	pop	{r3, r4, r5, pc}
 80056f0:	200002a4 	.word	0x200002a4

080056f4 <__errno>:
 80056f4:	4b01      	ldr	r3, [pc, #4]	; (80056fc <__errno+0x8>)
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	20000064 	.word	0x20000064

08005700 <__libc_init_array>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	4d0d      	ldr	r5, [pc, #52]	; (8005738 <__libc_init_array+0x38>)
 8005704:	4c0d      	ldr	r4, [pc, #52]	; (800573c <__libc_init_array+0x3c>)
 8005706:	1b64      	subs	r4, r4, r5
 8005708:	10a4      	asrs	r4, r4, #2
 800570a:	2600      	movs	r6, #0
 800570c:	42a6      	cmp	r6, r4
 800570e:	d109      	bne.n	8005724 <__libc_init_array+0x24>
 8005710:	4d0b      	ldr	r5, [pc, #44]	; (8005740 <__libc_init_array+0x40>)
 8005712:	4c0c      	ldr	r4, [pc, #48]	; (8005744 <__libc_init_array+0x44>)
 8005714:	f000 fdbe 	bl	8006294 <_init>
 8005718:	1b64      	subs	r4, r4, r5
 800571a:	10a4      	asrs	r4, r4, #2
 800571c:	2600      	movs	r6, #0
 800571e:	42a6      	cmp	r6, r4
 8005720:	d105      	bne.n	800572e <__libc_init_array+0x2e>
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	f855 3b04 	ldr.w	r3, [r5], #4
 8005728:	4798      	blx	r3
 800572a:	3601      	adds	r6, #1
 800572c:	e7ee      	b.n	800570c <__libc_init_array+0xc>
 800572e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005732:	4798      	blx	r3
 8005734:	3601      	adds	r6, #1
 8005736:	e7f2      	b.n	800571e <__libc_init_array+0x1e>
 8005738:	08006364 	.word	0x08006364
 800573c:	08006364 	.word	0x08006364
 8005740:	08006364 	.word	0x08006364
 8005744:	08006368 	.word	0x08006368

08005748 <__retarget_lock_acquire_recursive>:
 8005748:	4770      	bx	lr

0800574a <__retarget_lock_release_recursive>:
 800574a:	4770      	bx	lr

0800574c <_free_r>:
 800574c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800574e:	2900      	cmp	r1, #0
 8005750:	d044      	beq.n	80057dc <_free_r+0x90>
 8005752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005756:	9001      	str	r0, [sp, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f1a1 0404 	sub.w	r4, r1, #4
 800575e:	bfb8      	it	lt
 8005760:	18e4      	addlt	r4, r4, r3
 8005762:	f000 f8df 	bl	8005924 <__malloc_lock>
 8005766:	4a1e      	ldr	r2, [pc, #120]	; (80057e0 <_free_r+0x94>)
 8005768:	9801      	ldr	r0, [sp, #4]
 800576a:	6813      	ldr	r3, [r2, #0]
 800576c:	b933      	cbnz	r3, 800577c <_free_r+0x30>
 800576e:	6063      	str	r3, [r4, #4]
 8005770:	6014      	str	r4, [r2, #0]
 8005772:	b003      	add	sp, #12
 8005774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005778:	f000 b8da 	b.w	8005930 <__malloc_unlock>
 800577c:	42a3      	cmp	r3, r4
 800577e:	d908      	bls.n	8005792 <_free_r+0x46>
 8005780:	6825      	ldr	r5, [r4, #0]
 8005782:	1961      	adds	r1, r4, r5
 8005784:	428b      	cmp	r3, r1
 8005786:	bf01      	itttt	eq
 8005788:	6819      	ldreq	r1, [r3, #0]
 800578a:	685b      	ldreq	r3, [r3, #4]
 800578c:	1949      	addeq	r1, r1, r5
 800578e:	6021      	streq	r1, [r4, #0]
 8005790:	e7ed      	b.n	800576e <_free_r+0x22>
 8005792:	461a      	mov	r2, r3
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	b10b      	cbz	r3, 800579c <_free_r+0x50>
 8005798:	42a3      	cmp	r3, r4
 800579a:	d9fa      	bls.n	8005792 <_free_r+0x46>
 800579c:	6811      	ldr	r1, [r2, #0]
 800579e:	1855      	adds	r5, r2, r1
 80057a0:	42a5      	cmp	r5, r4
 80057a2:	d10b      	bne.n	80057bc <_free_r+0x70>
 80057a4:	6824      	ldr	r4, [r4, #0]
 80057a6:	4421      	add	r1, r4
 80057a8:	1854      	adds	r4, r2, r1
 80057aa:	42a3      	cmp	r3, r4
 80057ac:	6011      	str	r1, [r2, #0]
 80057ae:	d1e0      	bne.n	8005772 <_free_r+0x26>
 80057b0:	681c      	ldr	r4, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	6053      	str	r3, [r2, #4]
 80057b6:	440c      	add	r4, r1
 80057b8:	6014      	str	r4, [r2, #0]
 80057ba:	e7da      	b.n	8005772 <_free_r+0x26>
 80057bc:	d902      	bls.n	80057c4 <_free_r+0x78>
 80057be:	230c      	movs	r3, #12
 80057c0:	6003      	str	r3, [r0, #0]
 80057c2:	e7d6      	b.n	8005772 <_free_r+0x26>
 80057c4:	6825      	ldr	r5, [r4, #0]
 80057c6:	1961      	adds	r1, r4, r5
 80057c8:	428b      	cmp	r3, r1
 80057ca:	bf04      	itt	eq
 80057cc:	6819      	ldreq	r1, [r3, #0]
 80057ce:	685b      	ldreq	r3, [r3, #4]
 80057d0:	6063      	str	r3, [r4, #4]
 80057d2:	bf04      	itt	eq
 80057d4:	1949      	addeq	r1, r1, r5
 80057d6:	6021      	streq	r1, [r4, #0]
 80057d8:	6054      	str	r4, [r2, #4]
 80057da:	e7ca      	b.n	8005772 <_free_r+0x26>
 80057dc:	b003      	add	sp, #12
 80057de:	bd30      	pop	{r4, r5, pc}
 80057e0:	200002ac 	.word	0x200002ac

080057e4 <sbrk_aligned>:
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	4e0e      	ldr	r6, [pc, #56]	; (8005820 <sbrk_aligned+0x3c>)
 80057e8:	460c      	mov	r4, r1
 80057ea:	6831      	ldr	r1, [r6, #0]
 80057ec:	4605      	mov	r5, r0
 80057ee:	b911      	cbnz	r1, 80057f6 <sbrk_aligned+0x12>
 80057f0:	f000 fcbc 	bl	800616c <_sbrk_r>
 80057f4:	6030      	str	r0, [r6, #0]
 80057f6:	4621      	mov	r1, r4
 80057f8:	4628      	mov	r0, r5
 80057fa:	f000 fcb7 	bl	800616c <_sbrk_r>
 80057fe:	1c43      	adds	r3, r0, #1
 8005800:	d00a      	beq.n	8005818 <sbrk_aligned+0x34>
 8005802:	1cc4      	adds	r4, r0, #3
 8005804:	f024 0403 	bic.w	r4, r4, #3
 8005808:	42a0      	cmp	r0, r4
 800580a:	d007      	beq.n	800581c <sbrk_aligned+0x38>
 800580c:	1a21      	subs	r1, r4, r0
 800580e:	4628      	mov	r0, r5
 8005810:	f000 fcac 	bl	800616c <_sbrk_r>
 8005814:	3001      	adds	r0, #1
 8005816:	d101      	bne.n	800581c <sbrk_aligned+0x38>
 8005818:	f04f 34ff 	mov.w	r4, #4294967295
 800581c:	4620      	mov	r0, r4
 800581e:	bd70      	pop	{r4, r5, r6, pc}
 8005820:	200002b0 	.word	0x200002b0

08005824 <_malloc_r>:
 8005824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005828:	1ccd      	adds	r5, r1, #3
 800582a:	f025 0503 	bic.w	r5, r5, #3
 800582e:	3508      	adds	r5, #8
 8005830:	2d0c      	cmp	r5, #12
 8005832:	bf38      	it	cc
 8005834:	250c      	movcc	r5, #12
 8005836:	2d00      	cmp	r5, #0
 8005838:	4607      	mov	r7, r0
 800583a:	db01      	blt.n	8005840 <_malloc_r+0x1c>
 800583c:	42a9      	cmp	r1, r5
 800583e:	d905      	bls.n	800584c <_malloc_r+0x28>
 8005840:	230c      	movs	r3, #12
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	2600      	movs	r6, #0
 8005846:	4630      	mov	r0, r6
 8005848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800584c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005920 <_malloc_r+0xfc>
 8005850:	f000 f868 	bl	8005924 <__malloc_lock>
 8005854:	f8d8 3000 	ldr.w	r3, [r8]
 8005858:	461c      	mov	r4, r3
 800585a:	bb5c      	cbnz	r4, 80058b4 <_malloc_r+0x90>
 800585c:	4629      	mov	r1, r5
 800585e:	4638      	mov	r0, r7
 8005860:	f7ff ffc0 	bl	80057e4 <sbrk_aligned>
 8005864:	1c43      	adds	r3, r0, #1
 8005866:	4604      	mov	r4, r0
 8005868:	d155      	bne.n	8005916 <_malloc_r+0xf2>
 800586a:	f8d8 4000 	ldr.w	r4, [r8]
 800586e:	4626      	mov	r6, r4
 8005870:	2e00      	cmp	r6, #0
 8005872:	d145      	bne.n	8005900 <_malloc_r+0xdc>
 8005874:	2c00      	cmp	r4, #0
 8005876:	d048      	beq.n	800590a <_malloc_r+0xe6>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	4631      	mov	r1, r6
 800587c:	4638      	mov	r0, r7
 800587e:	eb04 0903 	add.w	r9, r4, r3
 8005882:	f000 fc73 	bl	800616c <_sbrk_r>
 8005886:	4581      	cmp	r9, r0
 8005888:	d13f      	bne.n	800590a <_malloc_r+0xe6>
 800588a:	6821      	ldr	r1, [r4, #0]
 800588c:	1a6d      	subs	r5, r5, r1
 800588e:	4629      	mov	r1, r5
 8005890:	4638      	mov	r0, r7
 8005892:	f7ff ffa7 	bl	80057e4 <sbrk_aligned>
 8005896:	3001      	adds	r0, #1
 8005898:	d037      	beq.n	800590a <_malloc_r+0xe6>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	442b      	add	r3, r5
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	f8d8 3000 	ldr.w	r3, [r8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d038      	beq.n	800591a <_malloc_r+0xf6>
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	42a2      	cmp	r2, r4
 80058ac:	d12b      	bne.n	8005906 <_malloc_r+0xe2>
 80058ae:	2200      	movs	r2, #0
 80058b0:	605a      	str	r2, [r3, #4]
 80058b2:	e00f      	b.n	80058d4 <_malloc_r+0xb0>
 80058b4:	6822      	ldr	r2, [r4, #0]
 80058b6:	1b52      	subs	r2, r2, r5
 80058b8:	d41f      	bmi.n	80058fa <_malloc_r+0xd6>
 80058ba:	2a0b      	cmp	r2, #11
 80058bc:	d917      	bls.n	80058ee <_malloc_r+0xca>
 80058be:	1961      	adds	r1, r4, r5
 80058c0:	42a3      	cmp	r3, r4
 80058c2:	6025      	str	r5, [r4, #0]
 80058c4:	bf18      	it	ne
 80058c6:	6059      	strne	r1, [r3, #4]
 80058c8:	6863      	ldr	r3, [r4, #4]
 80058ca:	bf08      	it	eq
 80058cc:	f8c8 1000 	streq.w	r1, [r8]
 80058d0:	5162      	str	r2, [r4, r5]
 80058d2:	604b      	str	r3, [r1, #4]
 80058d4:	4638      	mov	r0, r7
 80058d6:	f104 060b 	add.w	r6, r4, #11
 80058da:	f000 f829 	bl	8005930 <__malloc_unlock>
 80058de:	f026 0607 	bic.w	r6, r6, #7
 80058e2:	1d23      	adds	r3, r4, #4
 80058e4:	1af2      	subs	r2, r6, r3
 80058e6:	d0ae      	beq.n	8005846 <_malloc_r+0x22>
 80058e8:	1b9b      	subs	r3, r3, r6
 80058ea:	50a3      	str	r3, [r4, r2]
 80058ec:	e7ab      	b.n	8005846 <_malloc_r+0x22>
 80058ee:	42a3      	cmp	r3, r4
 80058f0:	6862      	ldr	r2, [r4, #4]
 80058f2:	d1dd      	bne.n	80058b0 <_malloc_r+0x8c>
 80058f4:	f8c8 2000 	str.w	r2, [r8]
 80058f8:	e7ec      	b.n	80058d4 <_malloc_r+0xb0>
 80058fa:	4623      	mov	r3, r4
 80058fc:	6864      	ldr	r4, [r4, #4]
 80058fe:	e7ac      	b.n	800585a <_malloc_r+0x36>
 8005900:	4634      	mov	r4, r6
 8005902:	6876      	ldr	r6, [r6, #4]
 8005904:	e7b4      	b.n	8005870 <_malloc_r+0x4c>
 8005906:	4613      	mov	r3, r2
 8005908:	e7cc      	b.n	80058a4 <_malloc_r+0x80>
 800590a:	230c      	movs	r3, #12
 800590c:	603b      	str	r3, [r7, #0]
 800590e:	4638      	mov	r0, r7
 8005910:	f000 f80e 	bl	8005930 <__malloc_unlock>
 8005914:	e797      	b.n	8005846 <_malloc_r+0x22>
 8005916:	6025      	str	r5, [r4, #0]
 8005918:	e7dc      	b.n	80058d4 <_malloc_r+0xb0>
 800591a:	605b      	str	r3, [r3, #4]
 800591c:	deff      	udf	#255	; 0xff
 800591e:	bf00      	nop
 8005920:	200002ac 	.word	0x200002ac

08005924 <__malloc_lock>:
 8005924:	4801      	ldr	r0, [pc, #4]	; (800592c <__malloc_lock+0x8>)
 8005926:	f7ff bf0f 	b.w	8005748 <__retarget_lock_acquire_recursive>
 800592a:	bf00      	nop
 800592c:	200002a8 	.word	0x200002a8

08005930 <__malloc_unlock>:
 8005930:	4801      	ldr	r0, [pc, #4]	; (8005938 <__malloc_unlock+0x8>)
 8005932:	f7ff bf0a 	b.w	800574a <__retarget_lock_release_recursive>
 8005936:	bf00      	nop
 8005938:	200002a8 	.word	0x200002a8

0800593c <__sfputc_r>:
 800593c:	6893      	ldr	r3, [r2, #8]
 800593e:	3b01      	subs	r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	b410      	push	{r4}
 8005944:	6093      	str	r3, [r2, #8]
 8005946:	da08      	bge.n	800595a <__sfputc_r+0x1e>
 8005948:	6994      	ldr	r4, [r2, #24]
 800594a:	42a3      	cmp	r3, r4
 800594c:	db01      	blt.n	8005952 <__sfputc_r+0x16>
 800594e:	290a      	cmp	r1, #10
 8005950:	d103      	bne.n	800595a <__sfputc_r+0x1e>
 8005952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005956:	f000 bb73 	b.w	8006040 <__swbuf_r>
 800595a:	6813      	ldr	r3, [r2, #0]
 800595c:	1c58      	adds	r0, r3, #1
 800595e:	6010      	str	r0, [r2, #0]
 8005960:	7019      	strb	r1, [r3, #0]
 8005962:	4608      	mov	r0, r1
 8005964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005968:	4770      	bx	lr

0800596a <__sfputs_r>:
 800596a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596c:	4606      	mov	r6, r0
 800596e:	460f      	mov	r7, r1
 8005970:	4614      	mov	r4, r2
 8005972:	18d5      	adds	r5, r2, r3
 8005974:	42ac      	cmp	r4, r5
 8005976:	d101      	bne.n	800597c <__sfputs_r+0x12>
 8005978:	2000      	movs	r0, #0
 800597a:	e007      	b.n	800598c <__sfputs_r+0x22>
 800597c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005980:	463a      	mov	r2, r7
 8005982:	4630      	mov	r0, r6
 8005984:	f7ff ffda 	bl	800593c <__sfputc_r>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d1f3      	bne.n	8005974 <__sfputs_r+0xa>
 800598c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005990 <_vfiprintf_r>:
 8005990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005994:	460d      	mov	r5, r1
 8005996:	b09d      	sub	sp, #116	; 0x74
 8005998:	4614      	mov	r4, r2
 800599a:	4698      	mov	r8, r3
 800599c:	4606      	mov	r6, r0
 800599e:	b118      	cbz	r0, 80059a8 <_vfiprintf_r+0x18>
 80059a0:	6a03      	ldr	r3, [r0, #32]
 80059a2:	b90b      	cbnz	r3, 80059a8 <_vfiprintf_r+0x18>
 80059a4:	f7ff fdcc 	bl	8005540 <__sinit>
 80059a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059aa:	07d9      	lsls	r1, r3, #31
 80059ac:	d405      	bmi.n	80059ba <_vfiprintf_r+0x2a>
 80059ae:	89ab      	ldrh	r3, [r5, #12]
 80059b0:	059a      	lsls	r2, r3, #22
 80059b2:	d402      	bmi.n	80059ba <_vfiprintf_r+0x2a>
 80059b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059b6:	f7ff fec7 	bl	8005748 <__retarget_lock_acquire_recursive>
 80059ba:	89ab      	ldrh	r3, [r5, #12]
 80059bc:	071b      	lsls	r3, r3, #28
 80059be:	d501      	bpl.n	80059c4 <_vfiprintf_r+0x34>
 80059c0:	692b      	ldr	r3, [r5, #16]
 80059c2:	b99b      	cbnz	r3, 80059ec <_vfiprintf_r+0x5c>
 80059c4:	4629      	mov	r1, r5
 80059c6:	4630      	mov	r0, r6
 80059c8:	f000 fb78 	bl	80060bc <__swsetup_r>
 80059cc:	b170      	cbz	r0, 80059ec <_vfiprintf_r+0x5c>
 80059ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059d0:	07dc      	lsls	r4, r3, #31
 80059d2:	d504      	bpl.n	80059de <_vfiprintf_r+0x4e>
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295
 80059d8:	b01d      	add	sp, #116	; 0x74
 80059da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059de:	89ab      	ldrh	r3, [r5, #12]
 80059e0:	0598      	lsls	r0, r3, #22
 80059e2:	d4f7      	bmi.n	80059d4 <_vfiprintf_r+0x44>
 80059e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059e6:	f7ff feb0 	bl	800574a <__retarget_lock_release_recursive>
 80059ea:	e7f3      	b.n	80059d4 <_vfiprintf_r+0x44>
 80059ec:	2300      	movs	r3, #0
 80059ee:	9309      	str	r3, [sp, #36]	; 0x24
 80059f0:	2320      	movs	r3, #32
 80059f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80059fa:	2330      	movs	r3, #48	; 0x30
 80059fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005bb0 <_vfiprintf_r+0x220>
 8005a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a04:	f04f 0901 	mov.w	r9, #1
 8005a08:	4623      	mov	r3, r4
 8005a0a:	469a      	mov	sl, r3
 8005a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a10:	b10a      	cbz	r2, 8005a16 <_vfiprintf_r+0x86>
 8005a12:	2a25      	cmp	r2, #37	; 0x25
 8005a14:	d1f9      	bne.n	8005a0a <_vfiprintf_r+0x7a>
 8005a16:	ebba 0b04 	subs.w	fp, sl, r4
 8005a1a:	d00b      	beq.n	8005a34 <_vfiprintf_r+0xa4>
 8005a1c:	465b      	mov	r3, fp
 8005a1e:	4622      	mov	r2, r4
 8005a20:	4629      	mov	r1, r5
 8005a22:	4630      	mov	r0, r6
 8005a24:	f7ff ffa1 	bl	800596a <__sfputs_r>
 8005a28:	3001      	adds	r0, #1
 8005a2a:	f000 80a9 	beq.w	8005b80 <_vfiprintf_r+0x1f0>
 8005a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a30:	445a      	add	r2, fp
 8005a32:	9209      	str	r2, [sp, #36]	; 0x24
 8005a34:	f89a 3000 	ldrb.w	r3, [sl]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 80a1 	beq.w	8005b80 <_vfiprintf_r+0x1f0>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f04f 32ff 	mov.w	r2, #4294967295
 8005a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a48:	f10a 0a01 	add.w	sl, sl, #1
 8005a4c:	9304      	str	r3, [sp, #16]
 8005a4e:	9307      	str	r3, [sp, #28]
 8005a50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a54:	931a      	str	r3, [sp, #104]	; 0x68
 8005a56:	4654      	mov	r4, sl
 8005a58:	2205      	movs	r2, #5
 8005a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a5e:	4854      	ldr	r0, [pc, #336]	; (8005bb0 <_vfiprintf_r+0x220>)
 8005a60:	f7fa fbb6 	bl	80001d0 <memchr>
 8005a64:	9a04      	ldr	r2, [sp, #16]
 8005a66:	b9d8      	cbnz	r0, 8005aa0 <_vfiprintf_r+0x110>
 8005a68:	06d1      	lsls	r1, r2, #27
 8005a6a:	bf44      	itt	mi
 8005a6c:	2320      	movmi	r3, #32
 8005a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a72:	0713      	lsls	r3, r2, #28
 8005a74:	bf44      	itt	mi
 8005a76:	232b      	movmi	r3, #43	; 0x2b
 8005a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a80:	2b2a      	cmp	r3, #42	; 0x2a
 8005a82:	d015      	beq.n	8005ab0 <_vfiprintf_r+0x120>
 8005a84:	9a07      	ldr	r2, [sp, #28]
 8005a86:	4654      	mov	r4, sl
 8005a88:	2000      	movs	r0, #0
 8005a8a:	f04f 0c0a 	mov.w	ip, #10
 8005a8e:	4621      	mov	r1, r4
 8005a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a94:	3b30      	subs	r3, #48	; 0x30
 8005a96:	2b09      	cmp	r3, #9
 8005a98:	d94d      	bls.n	8005b36 <_vfiprintf_r+0x1a6>
 8005a9a:	b1b0      	cbz	r0, 8005aca <_vfiprintf_r+0x13a>
 8005a9c:	9207      	str	r2, [sp, #28]
 8005a9e:	e014      	b.n	8005aca <_vfiprintf_r+0x13a>
 8005aa0:	eba0 0308 	sub.w	r3, r0, r8
 8005aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	9304      	str	r3, [sp, #16]
 8005aac:	46a2      	mov	sl, r4
 8005aae:	e7d2      	b.n	8005a56 <_vfiprintf_r+0xc6>
 8005ab0:	9b03      	ldr	r3, [sp, #12]
 8005ab2:	1d19      	adds	r1, r3, #4
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	9103      	str	r1, [sp, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bfbb      	ittet	lt
 8005abc:	425b      	neglt	r3, r3
 8005abe:	f042 0202 	orrlt.w	r2, r2, #2
 8005ac2:	9307      	strge	r3, [sp, #28]
 8005ac4:	9307      	strlt	r3, [sp, #28]
 8005ac6:	bfb8      	it	lt
 8005ac8:	9204      	strlt	r2, [sp, #16]
 8005aca:	7823      	ldrb	r3, [r4, #0]
 8005acc:	2b2e      	cmp	r3, #46	; 0x2e
 8005ace:	d10c      	bne.n	8005aea <_vfiprintf_r+0x15a>
 8005ad0:	7863      	ldrb	r3, [r4, #1]
 8005ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad4:	d134      	bne.n	8005b40 <_vfiprintf_r+0x1b0>
 8005ad6:	9b03      	ldr	r3, [sp, #12]
 8005ad8:	1d1a      	adds	r2, r3, #4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	9203      	str	r2, [sp, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bfb8      	it	lt
 8005ae2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ae6:	3402      	adds	r4, #2
 8005ae8:	9305      	str	r3, [sp, #20]
 8005aea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005bc0 <_vfiprintf_r+0x230>
 8005aee:	7821      	ldrb	r1, [r4, #0]
 8005af0:	2203      	movs	r2, #3
 8005af2:	4650      	mov	r0, sl
 8005af4:	f7fa fb6c 	bl	80001d0 <memchr>
 8005af8:	b138      	cbz	r0, 8005b0a <_vfiprintf_r+0x17a>
 8005afa:	9b04      	ldr	r3, [sp, #16]
 8005afc:	eba0 000a 	sub.w	r0, r0, sl
 8005b00:	2240      	movs	r2, #64	; 0x40
 8005b02:	4082      	lsls	r2, r0
 8005b04:	4313      	orrs	r3, r2
 8005b06:	3401      	adds	r4, #1
 8005b08:	9304      	str	r3, [sp, #16]
 8005b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b0e:	4829      	ldr	r0, [pc, #164]	; (8005bb4 <_vfiprintf_r+0x224>)
 8005b10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b14:	2206      	movs	r2, #6
 8005b16:	f7fa fb5b 	bl	80001d0 <memchr>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d03f      	beq.n	8005b9e <_vfiprintf_r+0x20e>
 8005b1e:	4b26      	ldr	r3, [pc, #152]	; (8005bb8 <_vfiprintf_r+0x228>)
 8005b20:	bb1b      	cbnz	r3, 8005b6a <_vfiprintf_r+0x1da>
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	3307      	adds	r3, #7
 8005b26:	f023 0307 	bic.w	r3, r3, #7
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	9303      	str	r3, [sp, #12]
 8005b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b30:	443b      	add	r3, r7
 8005b32:	9309      	str	r3, [sp, #36]	; 0x24
 8005b34:	e768      	b.n	8005a08 <_vfiprintf_r+0x78>
 8005b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	e7a6      	b.n	8005a8e <_vfiprintf_r+0xfe>
 8005b40:	2300      	movs	r3, #0
 8005b42:	3401      	adds	r4, #1
 8005b44:	9305      	str	r3, [sp, #20]
 8005b46:	4619      	mov	r1, r3
 8005b48:	f04f 0c0a 	mov.w	ip, #10
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b52:	3a30      	subs	r2, #48	; 0x30
 8005b54:	2a09      	cmp	r2, #9
 8005b56:	d903      	bls.n	8005b60 <_vfiprintf_r+0x1d0>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0c6      	beq.n	8005aea <_vfiprintf_r+0x15a>
 8005b5c:	9105      	str	r1, [sp, #20]
 8005b5e:	e7c4      	b.n	8005aea <_vfiprintf_r+0x15a>
 8005b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b64:	4604      	mov	r4, r0
 8005b66:	2301      	movs	r3, #1
 8005b68:	e7f0      	b.n	8005b4c <_vfiprintf_r+0x1bc>
 8005b6a:	ab03      	add	r3, sp, #12
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	462a      	mov	r2, r5
 8005b70:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <_vfiprintf_r+0x22c>)
 8005b72:	a904      	add	r1, sp, #16
 8005b74:	4630      	mov	r0, r6
 8005b76:	f3af 8000 	nop.w
 8005b7a:	4607      	mov	r7, r0
 8005b7c:	1c78      	adds	r0, r7, #1
 8005b7e:	d1d6      	bne.n	8005b2e <_vfiprintf_r+0x19e>
 8005b80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b82:	07d9      	lsls	r1, r3, #31
 8005b84:	d405      	bmi.n	8005b92 <_vfiprintf_r+0x202>
 8005b86:	89ab      	ldrh	r3, [r5, #12]
 8005b88:	059a      	lsls	r2, r3, #22
 8005b8a:	d402      	bmi.n	8005b92 <_vfiprintf_r+0x202>
 8005b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b8e:	f7ff fddc 	bl	800574a <__retarget_lock_release_recursive>
 8005b92:	89ab      	ldrh	r3, [r5, #12]
 8005b94:	065b      	lsls	r3, r3, #25
 8005b96:	f53f af1d 	bmi.w	80059d4 <_vfiprintf_r+0x44>
 8005b9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b9c:	e71c      	b.n	80059d8 <_vfiprintf_r+0x48>
 8005b9e:	ab03      	add	r3, sp, #12
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	462a      	mov	r2, r5
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <_vfiprintf_r+0x22c>)
 8005ba6:	a904      	add	r1, sp, #16
 8005ba8:	4630      	mov	r0, r6
 8005baa:	f000 f879 	bl	8005ca0 <_printf_i>
 8005bae:	e7e4      	b.n	8005b7a <_vfiprintf_r+0x1ea>
 8005bb0:	08006328 	.word	0x08006328
 8005bb4:	08006332 	.word	0x08006332
 8005bb8:	00000000 	.word	0x00000000
 8005bbc:	0800596b 	.word	0x0800596b
 8005bc0:	0800632e 	.word	0x0800632e

08005bc4 <_printf_common>:
 8005bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc8:	4616      	mov	r6, r2
 8005bca:	4699      	mov	r9, r3
 8005bcc:	688a      	ldr	r2, [r1, #8]
 8005bce:	690b      	ldr	r3, [r1, #16]
 8005bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	bfb8      	it	lt
 8005bd8:	4613      	movlt	r3, r2
 8005bda:	6033      	str	r3, [r6, #0]
 8005bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005be0:	4607      	mov	r7, r0
 8005be2:	460c      	mov	r4, r1
 8005be4:	b10a      	cbz	r2, 8005bea <_printf_common+0x26>
 8005be6:	3301      	adds	r3, #1
 8005be8:	6033      	str	r3, [r6, #0]
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	0699      	lsls	r1, r3, #26
 8005bee:	bf42      	ittt	mi
 8005bf0:	6833      	ldrmi	r3, [r6, #0]
 8005bf2:	3302      	addmi	r3, #2
 8005bf4:	6033      	strmi	r3, [r6, #0]
 8005bf6:	6825      	ldr	r5, [r4, #0]
 8005bf8:	f015 0506 	ands.w	r5, r5, #6
 8005bfc:	d106      	bne.n	8005c0c <_printf_common+0x48>
 8005bfe:	f104 0a19 	add.w	sl, r4, #25
 8005c02:	68e3      	ldr	r3, [r4, #12]
 8005c04:	6832      	ldr	r2, [r6, #0]
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	42ab      	cmp	r3, r5
 8005c0a:	dc26      	bgt.n	8005c5a <_printf_common+0x96>
 8005c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c10:	1e13      	subs	r3, r2, #0
 8005c12:	6822      	ldr	r2, [r4, #0]
 8005c14:	bf18      	it	ne
 8005c16:	2301      	movne	r3, #1
 8005c18:	0692      	lsls	r2, r2, #26
 8005c1a:	d42b      	bmi.n	8005c74 <_printf_common+0xb0>
 8005c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c20:	4649      	mov	r1, r9
 8005c22:	4638      	mov	r0, r7
 8005c24:	47c0      	blx	r8
 8005c26:	3001      	adds	r0, #1
 8005c28:	d01e      	beq.n	8005c68 <_printf_common+0xa4>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	6922      	ldr	r2, [r4, #16]
 8005c2e:	f003 0306 	and.w	r3, r3, #6
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	bf02      	ittt	eq
 8005c36:	68e5      	ldreq	r5, [r4, #12]
 8005c38:	6833      	ldreq	r3, [r6, #0]
 8005c3a:	1aed      	subeq	r5, r5, r3
 8005c3c:	68a3      	ldr	r3, [r4, #8]
 8005c3e:	bf0c      	ite	eq
 8005c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c44:	2500      	movne	r5, #0
 8005c46:	4293      	cmp	r3, r2
 8005c48:	bfc4      	itt	gt
 8005c4a:	1a9b      	subgt	r3, r3, r2
 8005c4c:	18ed      	addgt	r5, r5, r3
 8005c4e:	2600      	movs	r6, #0
 8005c50:	341a      	adds	r4, #26
 8005c52:	42b5      	cmp	r5, r6
 8005c54:	d11a      	bne.n	8005c8c <_printf_common+0xc8>
 8005c56:	2000      	movs	r0, #0
 8005c58:	e008      	b.n	8005c6c <_printf_common+0xa8>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4652      	mov	r2, sl
 8005c5e:	4649      	mov	r1, r9
 8005c60:	4638      	mov	r0, r7
 8005c62:	47c0      	blx	r8
 8005c64:	3001      	adds	r0, #1
 8005c66:	d103      	bne.n	8005c70 <_printf_common+0xac>
 8005c68:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c70:	3501      	adds	r5, #1
 8005c72:	e7c6      	b.n	8005c02 <_printf_common+0x3e>
 8005c74:	18e1      	adds	r1, r4, r3
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	2030      	movs	r0, #48	; 0x30
 8005c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c7e:	4422      	add	r2, r4
 8005c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c88:	3302      	adds	r3, #2
 8005c8a:	e7c7      	b.n	8005c1c <_printf_common+0x58>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	4622      	mov	r2, r4
 8005c90:	4649      	mov	r1, r9
 8005c92:	4638      	mov	r0, r7
 8005c94:	47c0      	blx	r8
 8005c96:	3001      	adds	r0, #1
 8005c98:	d0e6      	beq.n	8005c68 <_printf_common+0xa4>
 8005c9a:	3601      	adds	r6, #1
 8005c9c:	e7d9      	b.n	8005c52 <_printf_common+0x8e>
	...

08005ca0 <_printf_i>:
 8005ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca4:	7e0f      	ldrb	r7, [r1, #24]
 8005ca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ca8:	2f78      	cmp	r7, #120	; 0x78
 8005caa:	4691      	mov	r9, r2
 8005cac:	4680      	mov	r8, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	469a      	mov	sl, r3
 8005cb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cb6:	d807      	bhi.n	8005cc8 <_printf_i+0x28>
 8005cb8:	2f62      	cmp	r7, #98	; 0x62
 8005cba:	d80a      	bhi.n	8005cd2 <_printf_i+0x32>
 8005cbc:	2f00      	cmp	r7, #0
 8005cbe:	f000 80d4 	beq.w	8005e6a <_printf_i+0x1ca>
 8005cc2:	2f58      	cmp	r7, #88	; 0x58
 8005cc4:	f000 80c0 	beq.w	8005e48 <_printf_i+0x1a8>
 8005cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cd0:	e03a      	b.n	8005d48 <_printf_i+0xa8>
 8005cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cd6:	2b15      	cmp	r3, #21
 8005cd8:	d8f6      	bhi.n	8005cc8 <_printf_i+0x28>
 8005cda:	a101      	add	r1, pc, #4	; (adr r1, 8005ce0 <_printf_i+0x40>)
 8005cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ce0:	08005d39 	.word	0x08005d39
 8005ce4:	08005d4d 	.word	0x08005d4d
 8005ce8:	08005cc9 	.word	0x08005cc9
 8005cec:	08005cc9 	.word	0x08005cc9
 8005cf0:	08005cc9 	.word	0x08005cc9
 8005cf4:	08005cc9 	.word	0x08005cc9
 8005cf8:	08005d4d 	.word	0x08005d4d
 8005cfc:	08005cc9 	.word	0x08005cc9
 8005d00:	08005cc9 	.word	0x08005cc9
 8005d04:	08005cc9 	.word	0x08005cc9
 8005d08:	08005cc9 	.word	0x08005cc9
 8005d0c:	08005e51 	.word	0x08005e51
 8005d10:	08005d79 	.word	0x08005d79
 8005d14:	08005e0b 	.word	0x08005e0b
 8005d18:	08005cc9 	.word	0x08005cc9
 8005d1c:	08005cc9 	.word	0x08005cc9
 8005d20:	08005e73 	.word	0x08005e73
 8005d24:	08005cc9 	.word	0x08005cc9
 8005d28:	08005d79 	.word	0x08005d79
 8005d2c:	08005cc9 	.word	0x08005cc9
 8005d30:	08005cc9 	.word	0x08005cc9
 8005d34:	08005e13 	.word	0x08005e13
 8005d38:	682b      	ldr	r3, [r5, #0]
 8005d3a:	1d1a      	adds	r2, r3, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	602a      	str	r2, [r5, #0]
 8005d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e09f      	b.n	8005e8c <_printf_i+0x1ec>
 8005d4c:	6820      	ldr	r0, [r4, #0]
 8005d4e:	682b      	ldr	r3, [r5, #0]
 8005d50:	0607      	lsls	r7, r0, #24
 8005d52:	f103 0104 	add.w	r1, r3, #4
 8005d56:	6029      	str	r1, [r5, #0]
 8005d58:	d501      	bpl.n	8005d5e <_printf_i+0xbe>
 8005d5a:	681e      	ldr	r6, [r3, #0]
 8005d5c:	e003      	b.n	8005d66 <_printf_i+0xc6>
 8005d5e:	0646      	lsls	r6, r0, #25
 8005d60:	d5fb      	bpl.n	8005d5a <_printf_i+0xba>
 8005d62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d66:	2e00      	cmp	r6, #0
 8005d68:	da03      	bge.n	8005d72 <_printf_i+0xd2>
 8005d6a:	232d      	movs	r3, #45	; 0x2d
 8005d6c:	4276      	negs	r6, r6
 8005d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d72:	485a      	ldr	r0, [pc, #360]	; (8005edc <_printf_i+0x23c>)
 8005d74:	230a      	movs	r3, #10
 8005d76:	e012      	b.n	8005d9e <_printf_i+0xfe>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	6820      	ldr	r0, [r4, #0]
 8005d7c:	1d19      	adds	r1, r3, #4
 8005d7e:	6029      	str	r1, [r5, #0]
 8005d80:	0605      	lsls	r5, r0, #24
 8005d82:	d501      	bpl.n	8005d88 <_printf_i+0xe8>
 8005d84:	681e      	ldr	r6, [r3, #0]
 8005d86:	e002      	b.n	8005d8e <_printf_i+0xee>
 8005d88:	0641      	lsls	r1, r0, #25
 8005d8a:	d5fb      	bpl.n	8005d84 <_printf_i+0xe4>
 8005d8c:	881e      	ldrh	r6, [r3, #0]
 8005d8e:	4853      	ldr	r0, [pc, #332]	; (8005edc <_printf_i+0x23c>)
 8005d90:	2f6f      	cmp	r7, #111	; 0x6f
 8005d92:	bf0c      	ite	eq
 8005d94:	2308      	moveq	r3, #8
 8005d96:	230a      	movne	r3, #10
 8005d98:	2100      	movs	r1, #0
 8005d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d9e:	6865      	ldr	r5, [r4, #4]
 8005da0:	60a5      	str	r5, [r4, #8]
 8005da2:	2d00      	cmp	r5, #0
 8005da4:	bfa2      	ittt	ge
 8005da6:	6821      	ldrge	r1, [r4, #0]
 8005da8:	f021 0104 	bicge.w	r1, r1, #4
 8005dac:	6021      	strge	r1, [r4, #0]
 8005dae:	b90e      	cbnz	r6, 8005db4 <_printf_i+0x114>
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	d04b      	beq.n	8005e4c <_printf_i+0x1ac>
 8005db4:	4615      	mov	r5, r2
 8005db6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dba:	fb03 6711 	mls	r7, r3, r1, r6
 8005dbe:	5dc7      	ldrb	r7, [r0, r7]
 8005dc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dc4:	4637      	mov	r7, r6
 8005dc6:	42bb      	cmp	r3, r7
 8005dc8:	460e      	mov	r6, r1
 8005dca:	d9f4      	bls.n	8005db6 <_printf_i+0x116>
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d10b      	bne.n	8005de8 <_printf_i+0x148>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	07de      	lsls	r6, r3, #31
 8005dd4:	d508      	bpl.n	8005de8 <_printf_i+0x148>
 8005dd6:	6923      	ldr	r3, [r4, #16]
 8005dd8:	6861      	ldr	r1, [r4, #4]
 8005dda:	4299      	cmp	r1, r3
 8005ddc:	bfde      	ittt	le
 8005dde:	2330      	movle	r3, #48	; 0x30
 8005de0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005de4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005de8:	1b52      	subs	r2, r2, r5
 8005dea:	6122      	str	r2, [r4, #16]
 8005dec:	f8cd a000 	str.w	sl, [sp]
 8005df0:	464b      	mov	r3, r9
 8005df2:	aa03      	add	r2, sp, #12
 8005df4:	4621      	mov	r1, r4
 8005df6:	4640      	mov	r0, r8
 8005df8:	f7ff fee4 	bl	8005bc4 <_printf_common>
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d14a      	bne.n	8005e96 <_printf_i+0x1f6>
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295
 8005e04:	b004      	add	sp, #16
 8005e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	f043 0320 	orr.w	r3, r3, #32
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	4833      	ldr	r0, [pc, #204]	; (8005ee0 <_printf_i+0x240>)
 8005e14:	2778      	movs	r7, #120	; 0x78
 8005e16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	6829      	ldr	r1, [r5, #0]
 8005e1e:	061f      	lsls	r7, r3, #24
 8005e20:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e24:	d402      	bmi.n	8005e2c <_printf_i+0x18c>
 8005e26:	065f      	lsls	r7, r3, #25
 8005e28:	bf48      	it	mi
 8005e2a:	b2b6      	uxthmi	r6, r6
 8005e2c:	07df      	lsls	r7, r3, #31
 8005e2e:	bf48      	it	mi
 8005e30:	f043 0320 	orrmi.w	r3, r3, #32
 8005e34:	6029      	str	r1, [r5, #0]
 8005e36:	bf48      	it	mi
 8005e38:	6023      	strmi	r3, [r4, #0]
 8005e3a:	b91e      	cbnz	r6, 8005e44 <_printf_i+0x1a4>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	f023 0320 	bic.w	r3, r3, #32
 8005e42:	6023      	str	r3, [r4, #0]
 8005e44:	2310      	movs	r3, #16
 8005e46:	e7a7      	b.n	8005d98 <_printf_i+0xf8>
 8005e48:	4824      	ldr	r0, [pc, #144]	; (8005edc <_printf_i+0x23c>)
 8005e4a:	e7e4      	b.n	8005e16 <_printf_i+0x176>
 8005e4c:	4615      	mov	r5, r2
 8005e4e:	e7bd      	b.n	8005dcc <_printf_i+0x12c>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	6826      	ldr	r6, [r4, #0]
 8005e54:	6961      	ldr	r1, [r4, #20]
 8005e56:	1d18      	adds	r0, r3, #4
 8005e58:	6028      	str	r0, [r5, #0]
 8005e5a:	0635      	lsls	r5, r6, #24
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	d501      	bpl.n	8005e64 <_printf_i+0x1c4>
 8005e60:	6019      	str	r1, [r3, #0]
 8005e62:	e002      	b.n	8005e6a <_printf_i+0x1ca>
 8005e64:	0670      	lsls	r0, r6, #25
 8005e66:	d5fb      	bpl.n	8005e60 <_printf_i+0x1c0>
 8005e68:	8019      	strh	r1, [r3, #0]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	6123      	str	r3, [r4, #16]
 8005e6e:	4615      	mov	r5, r2
 8005e70:	e7bc      	b.n	8005dec <_printf_i+0x14c>
 8005e72:	682b      	ldr	r3, [r5, #0]
 8005e74:	1d1a      	adds	r2, r3, #4
 8005e76:	602a      	str	r2, [r5, #0]
 8005e78:	681d      	ldr	r5, [r3, #0]
 8005e7a:	6862      	ldr	r2, [r4, #4]
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f7fa f9a6 	bl	80001d0 <memchr>
 8005e84:	b108      	cbz	r0, 8005e8a <_printf_i+0x1ea>
 8005e86:	1b40      	subs	r0, r0, r5
 8005e88:	6060      	str	r0, [r4, #4]
 8005e8a:	6863      	ldr	r3, [r4, #4]
 8005e8c:	6123      	str	r3, [r4, #16]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e94:	e7aa      	b.n	8005dec <_printf_i+0x14c>
 8005e96:	6923      	ldr	r3, [r4, #16]
 8005e98:	462a      	mov	r2, r5
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	47d0      	blx	sl
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d0ad      	beq.n	8005e00 <_printf_i+0x160>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	079b      	lsls	r3, r3, #30
 8005ea8:	d413      	bmi.n	8005ed2 <_printf_i+0x232>
 8005eaa:	68e0      	ldr	r0, [r4, #12]
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	4298      	cmp	r0, r3
 8005eb0:	bfb8      	it	lt
 8005eb2:	4618      	movlt	r0, r3
 8005eb4:	e7a6      	b.n	8005e04 <_printf_i+0x164>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4632      	mov	r2, r6
 8005eba:	4649      	mov	r1, r9
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	47d0      	blx	sl
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d09d      	beq.n	8005e00 <_printf_i+0x160>
 8005ec4:	3501      	adds	r5, #1
 8005ec6:	68e3      	ldr	r3, [r4, #12]
 8005ec8:	9903      	ldr	r1, [sp, #12]
 8005eca:	1a5b      	subs	r3, r3, r1
 8005ecc:	42ab      	cmp	r3, r5
 8005ece:	dcf2      	bgt.n	8005eb6 <_printf_i+0x216>
 8005ed0:	e7eb      	b.n	8005eaa <_printf_i+0x20a>
 8005ed2:	2500      	movs	r5, #0
 8005ed4:	f104 0619 	add.w	r6, r4, #25
 8005ed8:	e7f5      	b.n	8005ec6 <_printf_i+0x226>
 8005eda:	bf00      	nop
 8005edc:	08006339 	.word	0x08006339
 8005ee0:	0800634a 	.word	0x0800634a

08005ee4 <__sflush_r>:
 8005ee4:	898a      	ldrh	r2, [r1, #12]
 8005ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eea:	4605      	mov	r5, r0
 8005eec:	0710      	lsls	r0, r2, #28
 8005eee:	460c      	mov	r4, r1
 8005ef0:	d458      	bmi.n	8005fa4 <__sflush_r+0xc0>
 8005ef2:	684b      	ldr	r3, [r1, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	dc05      	bgt.n	8005f04 <__sflush_r+0x20>
 8005ef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	dc02      	bgt.n	8005f04 <__sflush_r+0x20>
 8005efe:	2000      	movs	r0, #0
 8005f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f06:	2e00      	cmp	r6, #0
 8005f08:	d0f9      	beq.n	8005efe <__sflush_r+0x1a>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f10:	682f      	ldr	r7, [r5, #0]
 8005f12:	6a21      	ldr	r1, [r4, #32]
 8005f14:	602b      	str	r3, [r5, #0]
 8005f16:	d032      	beq.n	8005f7e <__sflush_r+0x9a>
 8005f18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	075a      	lsls	r2, r3, #29
 8005f1e:	d505      	bpl.n	8005f2c <__sflush_r+0x48>
 8005f20:	6863      	ldr	r3, [r4, #4]
 8005f22:	1ac0      	subs	r0, r0, r3
 8005f24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f26:	b10b      	cbz	r3, 8005f2c <__sflush_r+0x48>
 8005f28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f2a:	1ac0      	subs	r0, r0, r3
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	4602      	mov	r2, r0
 8005f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f32:	6a21      	ldr	r1, [r4, #32]
 8005f34:	4628      	mov	r0, r5
 8005f36:	47b0      	blx	r6
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	d106      	bne.n	8005f4c <__sflush_r+0x68>
 8005f3e:	6829      	ldr	r1, [r5, #0]
 8005f40:	291d      	cmp	r1, #29
 8005f42:	d82b      	bhi.n	8005f9c <__sflush_r+0xb8>
 8005f44:	4a29      	ldr	r2, [pc, #164]	; (8005fec <__sflush_r+0x108>)
 8005f46:	410a      	asrs	r2, r1
 8005f48:	07d6      	lsls	r6, r2, #31
 8005f4a:	d427      	bmi.n	8005f9c <__sflush_r+0xb8>
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	6062      	str	r2, [r4, #4]
 8005f50:	04d9      	lsls	r1, r3, #19
 8005f52:	6922      	ldr	r2, [r4, #16]
 8005f54:	6022      	str	r2, [r4, #0]
 8005f56:	d504      	bpl.n	8005f62 <__sflush_r+0x7e>
 8005f58:	1c42      	adds	r2, r0, #1
 8005f5a:	d101      	bne.n	8005f60 <__sflush_r+0x7c>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	b903      	cbnz	r3, 8005f62 <__sflush_r+0x7e>
 8005f60:	6560      	str	r0, [r4, #84]	; 0x54
 8005f62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f64:	602f      	str	r7, [r5, #0]
 8005f66:	2900      	cmp	r1, #0
 8005f68:	d0c9      	beq.n	8005efe <__sflush_r+0x1a>
 8005f6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f6e:	4299      	cmp	r1, r3
 8005f70:	d002      	beq.n	8005f78 <__sflush_r+0x94>
 8005f72:	4628      	mov	r0, r5
 8005f74:	f7ff fbea 	bl	800574c <_free_r>
 8005f78:	2000      	movs	r0, #0
 8005f7a:	6360      	str	r0, [r4, #52]	; 0x34
 8005f7c:	e7c0      	b.n	8005f00 <__sflush_r+0x1c>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	4628      	mov	r0, r5
 8005f82:	47b0      	blx	r6
 8005f84:	1c41      	adds	r1, r0, #1
 8005f86:	d1c8      	bne.n	8005f1a <__sflush_r+0x36>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0c5      	beq.n	8005f1a <__sflush_r+0x36>
 8005f8e:	2b1d      	cmp	r3, #29
 8005f90:	d001      	beq.n	8005f96 <__sflush_r+0xb2>
 8005f92:	2b16      	cmp	r3, #22
 8005f94:	d101      	bne.n	8005f9a <__sflush_r+0xb6>
 8005f96:	602f      	str	r7, [r5, #0]
 8005f98:	e7b1      	b.n	8005efe <__sflush_r+0x1a>
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fa0:	81a3      	strh	r3, [r4, #12]
 8005fa2:	e7ad      	b.n	8005f00 <__sflush_r+0x1c>
 8005fa4:	690f      	ldr	r7, [r1, #16]
 8005fa6:	2f00      	cmp	r7, #0
 8005fa8:	d0a9      	beq.n	8005efe <__sflush_r+0x1a>
 8005faa:	0793      	lsls	r3, r2, #30
 8005fac:	680e      	ldr	r6, [r1, #0]
 8005fae:	bf08      	it	eq
 8005fb0:	694b      	ldreq	r3, [r1, #20]
 8005fb2:	600f      	str	r7, [r1, #0]
 8005fb4:	bf18      	it	ne
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	eba6 0807 	sub.w	r8, r6, r7
 8005fbc:	608b      	str	r3, [r1, #8]
 8005fbe:	f1b8 0f00 	cmp.w	r8, #0
 8005fc2:	dd9c      	ble.n	8005efe <__sflush_r+0x1a>
 8005fc4:	6a21      	ldr	r1, [r4, #32]
 8005fc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005fc8:	4643      	mov	r3, r8
 8005fca:	463a      	mov	r2, r7
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b0      	blx	r6
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	dc06      	bgt.n	8005fe2 <__sflush_r+0xfe>
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fda:	81a3      	strh	r3, [r4, #12]
 8005fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe0:	e78e      	b.n	8005f00 <__sflush_r+0x1c>
 8005fe2:	4407      	add	r7, r0
 8005fe4:	eba8 0800 	sub.w	r8, r8, r0
 8005fe8:	e7e9      	b.n	8005fbe <__sflush_r+0xda>
 8005fea:	bf00      	nop
 8005fec:	dfbffffe 	.word	0xdfbffffe

08005ff0 <_fflush_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	690b      	ldr	r3, [r1, #16]
 8005ff4:	4605      	mov	r5, r0
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	b913      	cbnz	r3, 8006000 <_fflush_r+0x10>
 8005ffa:	2500      	movs	r5, #0
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	b118      	cbz	r0, 800600a <_fflush_r+0x1a>
 8006002:	6a03      	ldr	r3, [r0, #32]
 8006004:	b90b      	cbnz	r3, 800600a <_fflush_r+0x1a>
 8006006:	f7ff fa9b 	bl	8005540 <__sinit>
 800600a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f3      	beq.n	8005ffa <_fflush_r+0xa>
 8006012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006014:	07d0      	lsls	r0, r2, #31
 8006016:	d404      	bmi.n	8006022 <_fflush_r+0x32>
 8006018:	0599      	lsls	r1, r3, #22
 800601a:	d402      	bmi.n	8006022 <_fflush_r+0x32>
 800601c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800601e:	f7ff fb93 	bl	8005748 <__retarget_lock_acquire_recursive>
 8006022:	4628      	mov	r0, r5
 8006024:	4621      	mov	r1, r4
 8006026:	f7ff ff5d 	bl	8005ee4 <__sflush_r>
 800602a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800602c:	07da      	lsls	r2, r3, #31
 800602e:	4605      	mov	r5, r0
 8006030:	d4e4      	bmi.n	8005ffc <_fflush_r+0xc>
 8006032:	89a3      	ldrh	r3, [r4, #12]
 8006034:	059b      	lsls	r3, r3, #22
 8006036:	d4e1      	bmi.n	8005ffc <_fflush_r+0xc>
 8006038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800603a:	f7ff fb86 	bl	800574a <__retarget_lock_release_recursive>
 800603e:	e7dd      	b.n	8005ffc <_fflush_r+0xc>

08006040 <__swbuf_r>:
 8006040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006042:	460e      	mov	r6, r1
 8006044:	4614      	mov	r4, r2
 8006046:	4605      	mov	r5, r0
 8006048:	b118      	cbz	r0, 8006052 <__swbuf_r+0x12>
 800604a:	6a03      	ldr	r3, [r0, #32]
 800604c:	b90b      	cbnz	r3, 8006052 <__swbuf_r+0x12>
 800604e:	f7ff fa77 	bl	8005540 <__sinit>
 8006052:	69a3      	ldr	r3, [r4, #24]
 8006054:	60a3      	str	r3, [r4, #8]
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	071a      	lsls	r2, r3, #28
 800605a:	d525      	bpl.n	80060a8 <__swbuf_r+0x68>
 800605c:	6923      	ldr	r3, [r4, #16]
 800605e:	b31b      	cbz	r3, 80060a8 <__swbuf_r+0x68>
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	6922      	ldr	r2, [r4, #16]
 8006064:	1a98      	subs	r0, r3, r2
 8006066:	6963      	ldr	r3, [r4, #20]
 8006068:	b2f6      	uxtb	r6, r6
 800606a:	4283      	cmp	r3, r0
 800606c:	4637      	mov	r7, r6
 800606e:	dc04      	bgt.n	800607a <__swbuf_r+0x3a>
 8006070:	4621      	mov	r1, r4
 8006072:	4628      	mov	r0, r5
 8006074:	f7ff ffbc 	bl	8005ff0 <_fflush_r>
 8006078:	b9e0      	cbnz	r0, 80060b4 <__swbuf_r+0x74>
 800607a:	68a3      	ldr	r3, [r4, #8]
 800607c:	3b01      	subs	r3, #1
 800607e:	60a3      	str	r3, [r4, #8]
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	6022      	str	r2, [r4, #0]
 8006086:	701e      	strb	r6, [r3, #0]
 8006088:	6962      	ldr	r2, [r4, #20]
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	429a      	cmp	r2, r3
 800608e:	d004      	beq.n	800609a <__swbuf_r+0x5a>
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	07db      	lsls	r3, r3, #31
 8006094:	d506      	bpl.n	80060a4 <__swbuf_r+0x64>
 8006096:	2e0a      	cmp	r6, #10
 8006098:	d104      	bne.n	80060a4 <__swbuf_r+0x64>
 800609a:	4621      	mov	r1, r4
 800609c:	4628      	mov	r0, r5
 800609e:	f7ff ffa7 	bl	8005ff0 <_fflush_r>
 80060a2:	b938      	cbnz	r0, 80060b4 <__swbuf_r+0x74>
 80060a4:	4638      	mov	r0, r7
 80060a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060a8:	4621      	mov	r1, r4
 80060aa:	4628      	mov	r0, r5
 80060ac:	f000 f806 	bl	80060bc <__swsetup_r>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d0d5      	beq.n	8006060 <__swbuf_r+0x20>
 80060b4:	f04f 37ff 	mov.w	r7, #4294967295
 80060b8:	e7f4      	b.n	80060a4 <__swbuf_r+0x64>
	...

080060bc <__swsetup_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4b2a      	ldr	r3, [pc, #168]	; (8006168 <__swsetup_r+0xac>)
 80060c0:	4605      	mov	r5, r0
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	460c      	mov	r4, r1
 80060c6:	b118      	cbz	r0, 80060d0 <__swsetup_r+0x14>
 80060c8:	6a03      	ldr	r3, [r0, #32]
 80060ca:	b90b      	cbnz	r3, 80060d0 <__swsetup_r+0x14>
 80060cc:	f7ff fa38 	bl	8005540 <__sinit>
 80060d0:	89a3      	ldrh	r3, [r4, #12]
 80060d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060d6:	0718      	lsls	r0, r3, #28
 80060d8:	d422      	bmi.n	8006120 <__swsetup_r+0x64>
 80060da:	06d9      	lsls	r1, r3, #27
 80060dc:	d407      	bmi.n	80060ee <__swsetup_r+0x32>
 80060de:	2309      	movs	r3, #9
 80060e0:	602b      	str	r3, [r5, #0]
 80060e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060e6:	81a3      	strh	r3, [r4, #12]
 80060e8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ec:	e034      	b.n	8006158 <__swsetup_r+0x9c>
 80060ee:	0758      	lsls	r0, r3, #29
 80060f0:	d512      	bpl.n	8006118 <__swsetup_r+0x5c>
 80060f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060f4:	b141      	cbz	r1, 8006108 <__swsetup_r+0x4c>
 80060f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060fa:	4299      	cmp	r1, r3
 80060fc:	d002      	beq.n	8006104 <__swsetup_r+0x48>
 80060fe:	4628      	mov	r0, r5
 8006100:	f7ff fb24 	bl	800574c <_free_r>
 8006104:	2300      	movs	r3, #0
 8006106:	6363      	str	r3, [r4, #52]	; 0x34
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800610e:	81a3      	strh	r3, [r4, #12]
 8006110:	2300      	movs	r3, #0
 8006112:	6063      	str	r3, [r4, #4]
 8006114:	6923      	ldr	r3, [r4, #16]
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	f043 0308 	orr.w	r3, r3, #8
 800611e:	81a3      	strh	r3, [r4, #12]
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	b94b      	cbnz	r3, 8006138 <__swsetup_r+0x7c>
 8006124:	89a3      	ldrh	r3, [r4, #12]
 8006126:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800612a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800612e:	d003      	beq.n	8006138 <__swsetup_r+0x7c>
 8006130:	4621      	mov	r1, r4
 8006132:	4628      	mov	r0, r5
 8006134:	f000 f850 	bl	80061d8 <__smakebuf_r>
 8006138:	89a0      	ldrh	r0, [r4, #12]
 800613a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800613e:	f010 0301 	ands.w	r3, r0, #1
 8006142:	d00a      	beq.n	800615a <__swsetup_r+0x9e>
 8006144:	2300      	movs	r3, #0
 8006146:	60a3      	str	r3, [r4, #8]
 8006148:	6963      	ldr	r3, [r4, #20]
 800614a:	425b      	negs	r3, r3
 800614c:	61a3      	str	r3, [r4, #24]
 800614e:	6923      	ldr	r3, [r4, #16]
 8006150:	b943      	cbnz	r3, 8006164 <__swsetup_r+0xa8>
 8006152:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006156:	d1c4      	bne.n	80060e2 <__swsetup_r+0x26>
 8006158:	bd38      	pop	{r3, r4, r5, pc}
 800615a:	0781      	lsls	r1, r0, #30
 800615c:	bf58      	it	pl
 800615e:	6963      	ldrpl	r3, [r4, #20]
 8006160:	60a3      	str	r3, [r4, #8]
 8006162:	e7f4      	b.n	800614e <__swsetup_r+0x92>
 8006164:	2000      	movs	r0, #0
 8006166:	e7f7      	b.n	8006158 <__swsetup_r+0x9c>
 8006168:	20000064 	.word	0x20000064

0800616c <_sbrk_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	4d06      	ldr	r5, [pc, #24]	; (8006188 <_sbrk_r+0x1c>)
 8006170:	2300      	movs	r3, #0
 8006172:	4604      	mov	r4, r0
 8006174:	4608      	mov	r0, r1
 8006176:	602b      	str	r3, [r5, #0]
 8006178:	f7fa fd62 	bl	8000c40 <_sbrk>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d102      	bne.n	8006186 <_sbrk_r+0x1a>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	b103      	cbz	r3, 8006186 <_sbrk_r+0x1a>
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	200002a4 	.word	0x200002a4

0800618c <__swhatbuf_r>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	460c      	mov	r4, r1
 8006190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006194:	2900      	cmp	r1, #0
 8006196:	b096      	sub	sp, #88	; 0x58
 8006198:	4615      	mov	r5, r2
 800619a:	461e      	mov	r6, r3
 800619c:	da0d      	bge.n	80061ba <__swhatbuf_r+0x2e>
 800619e:	89a3      	ldrh	r3, [r4, #12]
 80061a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80061a4:	f04f 0100 	mov.w	r1, #0
 80061a8:	bf0c      	ite	eq
 80061aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80061ae:	2340      	movne	r3, #64	; 0x40
 80061b0:	2000      	movs	r0, #0
 80061b2:	6031      	str	r1, [r6, #0]
 80061b4:	602b      	str	r3, [r5, #0]
 80061b6:	b016      	add	sp, #88	; 0x58
 80061b8:	bd70      	pop	{r4, r5, r6, pc}
 80061ba:	466a      	mov	r2, sp
 80061bc:	f000 f848 	bl	8006250 <_fstat_r>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	dbec      	blt.n	800619e <__swhatbuf_r+0x12>
 80061c4:	9901      	ldr	r1, [sp, #4]
 80061c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80061ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80061ce:	4259      	negs	r1, r3
 80061d0:	4159      	adcs	r1, r3
 80061d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061d6:	e7eb      	b.n	80061b0 <__swhatbuf_r+0x24>

080061d8 <__smakebuf_r>:
 80061d8:	898b      	ldrh	r3, [r1, #12]
 80061da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061dc:	079d      	lsls	r5, r3, #30
 80061de:	4606      	mov	r6, r0
 80061e0:	460c      	mov	r4, r1
 80061e2:	d507      	bpl.n	80061f4 <__smakebuf_r+0x1c>
 80061e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	6123      	str	r3, [r4, #16]
 80061ec:	2301      	movs	r3, #1
 80061ee:	6163      	str	r3, [r4, #20]
 80061f0:	b002      	add	sp, #8
 80061f2:	bd70      	pop	{r4, r5, r6, pc}
 80061f4:	ab01      	add	r3, sp, #4
 80061f6:	466a      	mov	r2, sp
 80061f8:	f7ff ffc8 	bl	800618c <__swhatbuf_r>
 80061fc:	9900      	ldr	r1, [sp, #0]
 80061fe:	4605      	mov	r5, r0
 8006200:	4630      	mov	r0, r6
 8006202:	f7ff fb0f 	bl	8005824 <_malloc_r>
 8006206:	b948      	cbnz	r0, 800621c <__smakebuf_r+0x44>
 8006208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800620c:	059a      	lsls	r2, r3, #22
 800620e:	d4ef      	bmi.n	80061f0 <__smakebuf_r+0x18>
 8006210:	f023 0303 	bic.w	r3, r3, #3
 8006214:	f043 0302 	orr.w	r3, r3, #2
 8006218:	81a3      	strh	r3, [r4, #12]
 800621a:	e7e3      	b.n	80061e4 <__smakebuf_r+0xc>
 800621c:	89a3      	ldrh	r3, [r4, #12]
 800621e:	6020      	str	r0, [r4, #0]
 8006220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	9b00      	ldr	r3, [sp, #0]
 8006228:	6163      	str	r3, [r4, #20]
 800622a:	9b01      	ldr	r3, [sp, #4]
 800622c:	6120      	str	r0, [r4, #16]
 800622e:	b15b      	cbz	r3, 8006248 <__smakebuf_r+0x70>
 8006230:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006234:	4630      	mov	r0, r6
 8006236:	f000 f81d 	bl	8006274 <_isatty_r>
 800623a:	b128      	cbz	r0, 8006248 <__smakebuf_r+0x70>
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	f023 0303 	bic.w	r3, r3, #3
 8006242:	f043 0301 	orr.w	r3, r3, #1
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	89a3      	ldrh	r3, [r4, #12]
 800624a:	431d      	orrs	r5, r3
 800624c:	81a5      	strh	r5, [r4, #12]
 800624e:	e7cf      	b.n	80061f0 <__smakebuf_r+0x18>

08006250 <_fstat_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	4d07      	ldr	r5, [pc, #28]	; (8006270 <_fstat_r+0x20>)
 8006254:	2300      	movs	r3, #0
 8006256:	4604      	mov	r4, r0
 8006258:	4608      	mov	r0, r1
 800625a:	4611      	mov	r1, r2
 800625c:	602b      	str	r3, [r5, #0]
 800625e:	f7fa fcc6 	bl	8000bee <_fstat>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	d102      	bne.n	800626c <_fstat_r+0x1c>
 8006266:	682b      	ldr	r3, [r5, #0]
 8006268:	b103      	cbz	r3, 800626c <_fstat_r+0x1c>
 800626a:	6023      	str	r3, [r4, #0]
 800626c:	bd38      	pop	{r3, r4, r5, pc}
 800626e:	bf00      	nop
 8006270:	200002a4 	.word	0x200002a4

08006274 <_isatty_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4d06      	ldr	r5, [pc, #24]	; (8006290 <_isatty_r+0x1c>)
 8006278:	2300      	movs	r3, #0
 800627a:	4604      	mov	r4, r0
 800627c:	4608      	mov	r0, r1
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	f7fa fcc5 	bl	8000c0e <_isatty>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_isatty_r+0x1a>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_isatty_r+0x1a>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	200002a4 	.word	0x200002a4

08006294 <_init>:
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	bf00      	nop
 8006298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629a:	bc08      	pop	{r3}
 800629c:	469e      	mov	lr, r3
 800629e:	4770      	bx	lr

080062a0 <_fini>:
 80062a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a2:	bf00      	nop
 80062a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a6:	bc08      	pop	{r3}
 80062a8:	469e      	mov	lr, r3
 80062aa:	4770      	bx	lr
